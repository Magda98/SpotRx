{
	"pipes": [
		{
			"name": "DurationPipe",
			"id": "pipe-DurationPipe-6e9c5bede77e370f273e0e37c2f63fa366f338bc00261533530f7f7c5268d3dcc2e40cb3b752088bbd80a8d019b1ce1eb5fe876acdd9e2e40c909faed8fde6bb",
			"file": "src/app/shared/duration/duration.pipe.ts",
			"type": "pipe",
			"deprecated": false,
			"deprecationMessage": "",
			"description": "",
			"rawdescription": "\n",
			"properties": [],
			"methods": [
				{
					"name": "transform",
					"args": [
						{
							"name": "duration",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "string",
					"typeParameters": [],
					"line": 8,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "duration",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			],
			"standalone": true,
			"ngname": "duration",
			"sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'duration',\n  standalone: true,\n})\nexport class DurationPipe implements PipeTransform {\n  transform(duration: number): string {\n    const tempDuration = duration / 1000;\n    const m = Math.floor(tempDuration / 60);\n    const s = Math.floor(tempDuration % 60);\n\n    const durationString = s < 10 ? `${m}:0${s}` : `${m}:${s}`;\n    return durationString;\n  }\n}\n"
		}
	],
	"interfaces": [
		{
			"name": "Artist",
			"id": "interface-Artist-b0654dbe1b851fcdceb9ba8e1d547782bf2347db3134471d4cbb7372bde30873759e818f3be47501aadd712e3f3a0589bf783580fc33c6596f0383a501e80736",
			"file": "src/app/shared/interfaces/track.ts",
			"deprecated": false,
			"deprecationMessage": "",
			"type": "interface",
			"sourceCode": "import { Image } from './image';\n\nexport interface Track {\n  uri: string;\n  name: string;\n  id: string;\n  duration_ms: number;\n  album: {\n    id: string;\n    name: string;\n    images: Image[];\n    artists?: Artist[];\n    release_date?: string;\n    release_date_precision?: string;\n    total_tracks?: number;\n    type?: 'album';\n    uri?: string;\n  };\n  artists: Artist[];\n}\n\nexport interface Artist {\n  id: string;\n  name: string;\n  uri: string;\n  href?: string;\n  type?: 'artist';\n}\n\nexport interface Item {\n  added_at?: string;\n  track: Track;\n}\n\nexport interface TracksResponse<T = Item> {\n  href: string;\n  items: T[];\n  limit: number;\n  next: string | null;\n  offset: number;\n  previous: string | null;\n  total: number;\n}\n\nexport interface SearchResponse {\n  tracks: {\n    items: Track[];\n  };\n}\n\nexport interface Queue {\n  queue: string[];\n  index: number;\n}\n",
			"properties": [
				{
					"name": "href",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": true,
					"description": "",
					"line": 26
				},
				{
					"name": "id",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 23
				},
				{
					"name": "name",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 24
				},
				{
					"name": "type",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": true,
					"description": "",
					"line": 27
				},
				{
					"name": "uri",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 25
				}
			],
			"indexSignatures": [],
			"kind": 171,
			"methods": [],
			"extends": []
		},
		{
			"name": "AuthData",
			"id": "interface-AuthData-f61389ba4ac2bdaa7c4f4563414f88f46804930bdc6e63f46fb99f1022a357eb7d49c4d00a89f4c3f65bec94cb1bf6040260d270a6b456d839bbb0323b4d8952",
			"file": "src/app/shared/interfaces/authData.ts",
			"deprecated": false,
			"deprecationMessage": "",
			"type": "interface",
			"sourceCode": "export interface AuthData {\n  access_token: string;\n  expires_in: number;\n  refresh_token: string;\n  scope: string;\n  token_type: string;\n}\n",
			"properties": [
				{
					"name": "access_token",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 2
				},
				{
					"name": "expires_in",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "number",
					"optional": false,
					"description": "",
					"line": 3
				},
				{
					"name": "refresh_token",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 4
				},
				{
					"name": "scope",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 5
				},
				{
					"name": "token_type",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 6
				}
			],
			"indexSignatures": [],
			"kind": 171,
			"methods": [],
			"extends": []
		},
		{
			"name": "FeaturedPlaylistResponse",
			"id": "interface-FeaturedPlaylistResponse-e46dcb6c0d5e7452df8010b615538f9e31666fbebd0b437fc0c6abef592da17e8a9b9e1b70dbe63b2875d5333031c4151e3f72508afc42fc4c3114a04f73f3e8",
			"file": "src/app/shared/interfaces/playlist.ts",
			"deprecated": false,
			"deprecationMessage": "",
			"type": "interface",
			"sourceCode": "import { TracksResponse } from './track';\nimport { Image } from './image';\n\nexport interface Playlist {\n  description?: string;\n  href: string;\n  id: string;\n  images: Image[];\n  name: string;\n  type: string;\n  uri: string;\n  primary_color?: string;\n  tracks?: TracksResponse;\n}\n\nexport interface PlaylistResponse {\n  items: Playlist[];\n  total: number;\n  limit: number;\n  offset: number;\n}\n\nexport interface FeaturedPlaylistResponse {\n  playlists: PlaylistResponse;\n  message: string;\n}\n",
			"properties": [
				{
					"name": "message",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 25
				},
				{
					"name": "playlists",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "PlaylistResponse",
					"optional": false,
					"description": "",
					"line": 24
				}
			],
			"indexSignatures": [],
			"kind": 171,
			"methods": [],
			"extends": []
		},
		{
			"name": "Image",
			"id": "interface-Image-89ca17b2fe566044e6eb16b5475af36f9ea919d2712e469636577453b45ebbf19a4a2bada81d743f7a48565a09fee2df01fdf71ab28ef8a99e6eb19e8c2247ce",
			"file": "src/app/shared/interfaces/image.ts",
			"deprecated": false,
			"deprecationMessage": "",
			"type": "interface",
			"sourceCode": "export interface Image {\n  width: number | null;\n  height: number | null;\n  url: string;\n}\n",
			"properties": [
				{
					"name": "height",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "number | null",
					"optional": false,
					"description": "",
					"line": 3
				},
				{
					"name": "url",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 4
				},
				{
					"name": "width",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "number | null",
					"optional": false,
					"description": "",
					"line": 2
				}
			],
			"indexSignatures": [],
			"kind": 171,
			"methods": [],
			"extends": []
		},
		{
			"name": "Item",
			"id": "interface-Item-b0654dbe1b851fcdceb9ba8e1d547782bf2347db3134471d4cbb7372bde30873759e818f3be47501aadd712e3f3a0589bf783580fc33c6596f0383a501e80736",
			"file": "src/app/shared/interfaces/track.ts",
			"deprecated": false,
			"deprecationMessage": "",
			"type": "interface",
			"sourceCode": "import { Image } from './image';\n\nexport interface Track {\n  uri: string;\n  name: string;\n  id: string;\n  duration_ms: number;\n  album: {\n    id: string;\n    name: string;\n    images: Image[];\n    artists?: Artist[];\n    release_date?: string;\n    release_date_precision?: string;\n    total_tracks?: number;\n    type?: 'album';\n    uri?: string;\n  };\n  artists: Artist[];\n}\n\nexport interface Artist {\n  id: string;\n  name: string;\n  uri: string;\n  href?: string;\n  type?: 'artist';\n}\n\nexport interface Item {\n  added_at?: string;\n  track: Track;\n}\n\nexport interface TracksResponse<T = Item> {\n  href: string;\n  items: T[];\n  limit: number;\n  next: string | null;\n  offset: number;\n  previous: string | null;\n  total: number;\n}\n\nexport interface SearchResponse {\n  tracks: {\n    items: Track[];\n  };\n}\n\nexport interface Queue {\n  queue: string[];\n  index: number;\n}\n",
			"properties": [
				{
					"name": "added_at",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": true,
					"description": "",
					"line": 31
				},
				{
					"name": "track",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Track",
					"optional": false,
					"description": "",
					"line": 32
				}
			],
			"indexSignatures": [],
			"kind": 171,
			"methods": [],
			"extends": []
		},
		{
			"name": "Playlist",
			"id": "interface-Playlist-e46dcb6c0d5e7452df8010b615538f9e31666fbebd0b437fc0c6abef592da17e8a9b9e1b70dbe63b2875d5333031c4151e3f72508afc42fc4c3114a04f73f3e8",
			"file": "src/app/shared/interfaces/playlist.ts",
			"deprecated": false,
			"deprecationMessage": "",
			"type": "interface",
			"sourceCode": "import { TracksResponse } from './track';\nimport { Image } from './image';\n\nexport interface Playlist {\n  description?: string;\n  href: string;\n  id: string;\n  images: Image[];\n  name: string;\n  type: string;\n  uri: string;\n  primary_color?: string;\n  tracks?: TracksResponse;\n}\n\nexport interface PlaylistResponse {\n  items: Playlist[];\n  total: number;\n  limit: number;\n  offset: number;\n}\n\nexport interface FeaturedPlaylistResponse {\n  playlists: PlaylistResponse;\n  message: string;\n}\n",
			"properties": [
				{
					"name": "description",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": true,
					"description": "",
					"line": 5
				},
				{
					"name": "href",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 6
				},
				{
					"name": "id",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 7
				},
				{
					"name": "images",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Image[]",
					"optional": false,
					"description": "",
					"line": 8
				},
				{
					"name": "name",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 9
				},
				{
					"name": "primary_color",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": true,
					"description": "",
					"line": 12
				},
				{
					"name": "tracks",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "TracksResponse",
					"optional": true,
					"description": "",
					"line": 13
				},
				{
					"name": "type",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 10
				},
				{
					"name": "uri",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 11
				}
			],
			"indexSignatures": [],
			"kind": 171,
			"methods": [],
			"extends": []
		},
		{
			"name": "PlaylistResponse",
			"id": "interface-PlaylistResponse-e46dcb6c0d5e7452df8010b615538f9e31666fbebd0b437fc0c6abef592da17e8a9b9e1b70dbe63b2875d5333031c4151e3f72508afc42fc4c3114a04f73f3e8",
			"file": "src/app/shared/interfaces/playlist.ts",
			"deprecated": false,
			"deprecationMessage": "",
			"type": "interface",
			"sourceCode": "import { TracksResponse } from './track';\nimport { Image } from './image';\n\nexport interface Playlist {\n  description?: string;\n  href: string;\n  id: string;\n  images: Image[];\n  name: string;\n  type: string;\n  uri: string;\n  primary_color?: string;\n  tracks?: TracksResponse;\n}\n\nexport interface PlaylistResponse {\n  items: Playlist[];\n  total: number;\n  limit: number;\n  offset: number;\n}\n\nexport interface FeaturedPlaylistResponse {\n  playlists: PlaylistResponse;\n  message: string;\n}\n",
			"properties": [
				{
					"name": "items",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Playlist[]",
					"optional": false,
					"description": "",
					"line": 17
				},
				{
					"name": "limit",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "number",
					"optional": false,
					"description": "",
					"line": 19
				},
				{
					"name": "offset",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "number",
					"optional": false,
					"description": "",
					"line": 20
				},
				{
					"name": "total",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "number",
					"optional": false,
					"description": "",
					"line": 18
				}
			],
			"indexSignatures": [],
			"kind": 171,
			"methods": [],
			"extends": []
		},
		{
			"name": "Queue",
			"id": "interface-Queue-b0654dbe1b851fcdceb9ba8e1d547782bf2347db3134471d4cbb7372bde30873759e818f3be47501aadd712e3f3a0589bf783580fc33c6596f0383a501e80736",
			"file": "src/app/shared/interfaces/track.ts",
			"deprecated": false,
			"deprecationMessage": "",
			"type": "interface",
			"sourceCode": "import { Image } from './image';\n\nexport interface Track {\n  uri: string;\n  name: string;\n  id: string;\n  duration_ms: number;\n  album: {\n    id: string;\n    name: string;\n    images: Image[];\n    artists?: Artist[];\n    release_date?: string;\n    release_date_precision?: string;\n    total_tracks?: number;\n    type?: 'album';\n    uri?: string;\n  };\n  artists: Artist[];\n}\n\nexport interface Artist {\n  id: string;\n  name: string;\n  uri: string;\n  href?: string;\n  type?: 'artist';\n}\n\nexport interface Item {\n  added_at?: string;\n  track: Track;\n}\n\nexport interface TracksResponse<T = Item> {\n  href: string;\n  items: T[];\n  limit: number;\n  next: string | null;\n  offset: number;\n  previous: string | null;\n  total: number;\n}\n\nexport interface SearchResponse {\n  tracks: {\n    items: Track[];\n  };\n}\n\nexport interface Queue {\n  queue: string[];\n  index: number;\n}\n",
			"properties": [
				{
					"name": "index",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "number",
					"optional": false,
					"description": "",
					"line": 53
				},
				{
					"name": "queue",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string[]",
					"optional": false,
					"description": "",
					"line": 52
				}
			],
			"indexSignatures": [],
			"kind": 171,
			"methods": [],
			"extends": []
		},
		{
			"name": "SearchResponse",
			"id": "interface-SearchResponse-b0654dbe1b851fcdceb9ba8e1d547782bf2347db3134471d4cbb7372bde30873759e818f3be47501aadd712e3f3a0589bf783580fc33c6596f0383a501e80736",
			"file": "src/app/shared/interfaces/track.ts",
			"deprecated": false,
			"deprecationMessage": "",
			"type": "interface",
			"sourceCode": "import { Image } from './image';\n\nexport interface Track {\n  uri: string;\n  name: string;\n  id: string;\n  duration_ms: number;\n  album: {\n    id: string;\n    name: string;\n    images: Image[];\n    artists?: Artist[];\n    release_date?: string;\n    release_date_precision?: string;\n    total_tracks?: number;\n    type?: 'album';\n    uri?: string;\n  };\n  artists: Artist[];\n}\n\nexport interface Artist {\n  id: string;\n  name: string;\n  uri: string;\n  href?: string;\n  type?: 'artist';\n}\n\nexport interface Item {\n  added_at?: string;\n  track: Track;\n}\n\nexport interface TracksResponse<T = Item> {\n  href: string;\n  items: T[];\n  limit: number;\n  next: string | null;\n  offset: number;\n  previous: string | null;\n  total: number;\n}\n\nexport interface SearchResponse {\n  tracks: {\n    items: Track[];\n  };\n}\n\nexport interface Queue {\n  queue: string[];\n  index: number;\n}\n",
			"properties": [
				{
					"name": "tracks",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "literal type",
					"optional": false,
					"description": "",
					"line": 46
				}
			],
			"indexSignatures": [],
			"kind": 171,
			"methods": [],
			"extends": []
		},
		{
			"name": "Track",
			"id": "interface-Track-b0654dbe1b851fcdceb9ba8e1d547782bf2347db3134471d4cbb7372bde30873759e818f3be47501aadd712e3f3a0589bf783580fc33c6596f0383a501e80736",
			"file": "src/app/shared/interfaces/track.ts",
			"deprecated": false,
			"deprecationMessage": "",
			"type": "interface",
			"sourceCode": "import { Image } from './image';\n\nexport interface Track {\n  uri: string;\n  name: string;\n  id: string;\n  duration_ms: number;\n  album: {\n    id: string;\n    name: string;\n    images: Image[];\n    artists?: Artist[];\n    release_date?: string;\n    release_date_precision?: string;\n    total_tracks?: number;\n    type?: 'album';\n    uri?: string;\n  };\n  artists: Artist[];\n}\n\nexport interface Artist {\n  id: string;\n  name: string;\n  uri: string;\n  href?: string;\n  type?: 'artist';\n}\n\nexport interface Item {\n  added_at?: string;\n  track: Track;\n}\n\nexport interface TracksResponse<T = Item> {\n  href: string;\n  items: T[];\n  limit: number;\n  next: string | null;\n  offset: number;\n  previous: string | null;\n  total: number;\n}\n\nexport interface SearchResponse {\n  tracks: {\n    items: Track[];\n  };\n}\n\nexport interface Queue {\n  queue: string[];\n  index: number;\n}\n",
			"properties": [
				{
					"name": "album",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "literal type",
					"optional": false,
					"description": "",
					"line": 8
				},
				{
					"name": "artists",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Artist[]",
					"optional": false,
					"description": "",
					"line": 19
				},
				{
					"name": "duration_ms",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "number",
					"optional": false,
					"description": "",
					"line": 7
				},
				{
					"name": "id",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 6
				},
				{
					"name": "name",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 5
				},
				{
					"name": "uri",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 4
				}
			],
			"indexSignatures": [],
			"kind": 171,
			"methods": [],
			"extends": []
		},
		{
			"name": "TracksResponse",
			"id": "interface-TracksResponse-b0654dbe1b851fcdceb9ba8e1d547782bf2347db3134471d4cbb7372bde30873759e818f3be47501aadd712e3f3a0589bf783580fc33c6596f0383a501e80736",
			"file": "src/app/shared/interfaces/track.ts",
			"deprecated": false,
			"deprecationMessage": "",
			"type": "interface",
			"sourceCode": "import { Image } from './image';\n\nexport interface Track {\n  uri: string;\n  name: string;\n  id: string;\n  duration_ms: number;\n  album: {\n    id: string;\n    name: string;\n    images: Image[];\n    artists?: Artist[];\n    release_date?: string;\n    release_date_precision?: string;\n    total_tracks?: number;\n    type?: 'album';\n    uri?: string;\n  };\n  artists: Artist[];\n}\n\nexport interface Artist {\n  id: string;\n  name: string;\n  uri: string;\n  href?: string;\n  type?: 'artist';\n}\n\nexport interface Item {\n  added_at?: string;\n  track: Track;\n}\n\nexport interface TracksResponse<T = Item> {\n  href: string;\n  items: T[];\n  limit: number;\n  next: string | null;\n  offset: number;\n  previous: string | null;\n  total: number;\n}\n\nexport interface SearchResponse {\n  tracks: {\n    items: Track[];\n  };\n}\n\nexport interface Queue {\n  queue: string[];\n  index: number;\n}\n",
			"properties": [
				{
					"name": "href",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 36
				},
				{
					"name": "items",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "T[]",
					"optional": false,
					"description": "",
					"line": 37
				},
				{
					"name": "limit",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "number",
					"optional": false,
					"description": "",
					"line": 38
				},
				{
					"name": "next",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string | null",
					"optional": false,
					"description": "",
					"line": 39
				},
				{
					"name": "offset",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "number",
					"optional": false,
					"description": "",
					"line": 40
				},
				{
					"name": "previous",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string | null",
					"optional": false,
					"description": "",
					"line": 41
				},
				{
					"name": "total",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "number",
					"optional": false,
					"description": "",
					"line": 42
				}
			],
			"indexSignatures": [],
			"kind": 171,
			"methods": [],
			"extends": []
		},
		{
			"name": "User",
			"id": "interface-User-e629e78389531d39dfffc571ab2874948df737d724756468ae8a263a35526cfa3f6a129938b1ac88b415d3f9d5690bf4830bab2e827286afb909eff025220e90",
			"file": "src/app/shared/interfaces/user.ts",
			"deprecated": false,
			"deprecationMessage": "",
			"type": "interface",
			"sourceCode": "import { Image } from \"./image\"\nexport interface User {\n    country: string,\n    display_name: string,\n    email: string,\n    explicit_content: Record<string, boolean>,\n    external_urls: Record<string, string>,\n    followers: Record<string, number>,\n    href: string,\n    id: string,\n    images: Image[],\n    product: string,\n    type: string,\n    uri: string\n}\n\n\n",
			"properties": [
				{
					"name": "country",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 3
				},
				{
					"name": "display_name",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 4
				},
				{
					"name": "email",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 5
				},
				{
					"name": "explicit_content",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Record<string | boolean>",
					"optional": false,
					"description": "",
					"line": 6
				},
				{
					"name": "external_urls",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Record<string | string>",
					"optional": false,
					"description": "",
					"line": 7
				},
				{
					"name": "followers",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Record<string | number>",
					"optional": false,
					"description": "",
					"line": 8
				},
				{
					"name": "href",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 9
				},
				{
					"name": "id",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 10
				},
				{
					"name": "images",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Image[]",
					"optional": false,
					"description": "",
					"line": 11
				},
				{
					"name": "product",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 12
				},
				{
					"name": "type",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 13
				},
				{
					"name": "uri",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 14
				}
			],
			"indexSignatures": [],
			"kind": 171,
			"methods": [],
			"extends": []
		}
	],
	"injectables": [
		{
			"name": "AuthService",
			"id": "injectable-AuthService-ebd6c65d1f07d5aaa2b0b0784e5d03ee9b955e143d0d9c056124b701dfaa20b856e32314452625531d48cb16969469427e4f250d66b2f759994d6bb7f35b0995",
			"file": "src/app/shared/services/auth.service.ts",
			"properties": [
				{
					"name": "authData",
					"defaultValue": "new BehaviorSubject<AuthData | undefined>(undefined)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 23
				},
				{
					"name": "authDataSotrageKey",
					"defaultValue": "'authData'",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 21,
					"modifierKind": [123, 148]
				},
				{
					"name": "authTokenUrl",
					"defaultValue": "'https://accounts.spotify.com/api/token'",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 19,
					"modifierKind": [123, 148]
				},
				{
					"name": "authUrl",
					"defaultValue": "'https://accounts.spotify.com/authorize'",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 20,
					"modifierKind": [123, 148]
				},
				{
					"name": "loggedIn",
					"defaultValue": "new ReplaySubject<boolean>()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 25
				},
				{
					"name": "refreshToken",
					"defaultValue": "new BehaviorSubject<string | undefined>(undefined)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 24
				},
				{
					"name": "token",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string | undefined",
					"optional": false,
					"description": "",
					"line": 22
				}
			],
			"methods": [
				{
					"name": "getRefreshToken",
					"args": [],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 95,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "getToken",
					"args": [],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 71,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "login",
					"args": [],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 61,
					"deprecated": false,
					"deprecationMessage": "",
					"modifierKind": [134]
				},
				{
					"name": "logout",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 56,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "syncAuthDataInStorage",
					"args": [],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 48,
					"deprecated": false,
					"deprecationMessage": "",
					"rawdescription": "\n\nAuth data should be synced with local storage\nover the life of the app\n",
					"description": "<p>Auth data should be synced with local storage\nover the life of the app</p>\n",
					"jsdoctags": [
						{
							"tagName": {
								"pos": 1560,
								"end": 1567,
								"flags": 16842752,
								"modifierFlagsCache": 0,
								"transformFlags": 0,
								"kind": 80,
								"escapedText": "returns"
							},
							"comment": "<p>Observable&lt;AuthData | undefined&gt;</p>\n"
						}
					]
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"description": "",
			"rawdescription": "\n",
			"sourceCode": "import { AuthData } from './../interfaces/authData';\nimport { StorageService } from './storage.service';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, ReplaySubject, switchMap, tap } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { environment } from '../../../environments/environment';\nimport {\n  base64url,\n  generateCodeChallenge,\n  randomBytes,\n} from '../../utils/utils';\nimport { CLIENT_ID, HEADER_CONFIG, SPORIFY_SCOPES } from '../../utils/config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private readonly authTokenUrl = 'https://accounts.spotify.com/api/token';\n  private readonly authUrl = 'https://accounts.spotify.com/authorize';\n  private readonly authDataSotrageKey = 'authData';\n  token: string | undefined;\n  authData = new BehaviorSubject<AuthData | undefined>(undefined);\n  refreshToken = new BehaviorSubject<string | undefined>(undefined);\n  loggedIn = new ReplaySubject<boolean>();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private storage: StorageService\n  ) {\n    const data: AuthData | null = this.storage.getData(this.authDataSotrageKey);\n    if (data) {\n      this.token = data.access_token;\n      this.authData.next(data ?? undefined);\n      this.refreshToken.next(data.refresh_token);\n    }\n    if (!data) this.loggedIn.next(false);\n\n    this.syncAuthDataInStorage().subscribe();\n  }\n\n  /**\n   * Auth data should be synced with local storage\n   * over the life of the app\n   * @returns Observable<AuthData | undefined>\n   */\n  syncAuthDataInStorage() {\n    return this.authData.pipe(\n      tap((authData) => {\n        if (authData) this.storage.setData(this.authDataSotrageKey, authData);\n      })\n    );\n  }\n\n  logout() {\n    this.storage.removeData(this.authDataSotrageKey);\n    window.location.reload();\n  }\n\n  async login() {\n    const code_verifier = base64url(randomBytes(96));\n    const code = await generateCodeChallenge(code_verifier);\n    const scope = SPORIFY_SCOPES.join('%20');\n    const responseType = 'code';\n\n    window.sessionStorage.setItem('code_verifier', code_verifier);\n    window.location.href = `${this.authUrl}?client_id=${CLIENT_ID}&scope=${scope}&redirect_uri=${environment.redirectUri}&response_type=${responseType}&code_challenge_method=S256&code_challenge=${code}`;\n  }\n\n  getToken() {\n    const code_verifier = window.sessionStorage.getItem('code_verifier') ?? '';\n    const url = location.search;\n    const code = new URLSearchParams(url).get('code') ?? '';\n    const urlParams = new URLSearchParams();\n\n    urlParams.append('grant_type', 'authorization_code');\n    urlParams.append('code', code);\n    urlParams.append('redirect_uri', environment.redirectUri);\n    urlParams.append('client_id', CLIENT_ID);\n    urlParams.append('code_verifier', code_verifier);\n\n    return this.http\n      .post<AuthData>(this.authTokenUrl, urlParams, HEADER_CONFIG)\n      .pipe(\n        tap((authData) => {\n          this.token = authData.access_token;\n          this.authData.next(authData);\n          this.loggedIn.next(true);\n          this.router.navigate(['']);\n        })\n      );\n  }\n\n  getRefreshToken() {\n    return this.refreshToken.pipe(\n      switchMap((refreshToken) => {\n        const urlParams = new URLSearchParams({\n          grant_type: 'refresh_token',\n          refresh_token: refreshToken ?? '',\n          client_id: CLIENT_ID,\n        });\n\n        return this.http.post<AuthData>(\n          this.authTokenUrl,\n          urlParams,\n          HEADER_CONFIG\n        );\n      }),\n      tap((authData) => {\n        this.token = authData.access_token;\n        this.authData.next(authData);\n        this.loggedIn.next(true);\n        // TODO: initialize script after making sure that token is valid\n        // reload to properly initialize Spotify WebPlayer SDK\n        window.location.reload();\n      })\n    );\n  }\n}\n",
			"constructorObj": {
				"name": "constructor",
				"description": "",
				"deprecated": false,
				"deprecationMessage": "",
				"args": [
					{
						"name": "http",
						"type": "HttpClient",
						"deprecated": false,
						"deprecationMessage": ""
					},
					{
						"name": "router",
						"type": "Router",
						"deprecated": false,
						"deprecationMessage": ""
					},
					{
						"name": "storage",
						"type": "StorageService",
						"deprecated": false,
						"deprecationMessage": ""
					}
				],
				"line": 25,
				"jsdoctags": [
					{
						"name": "http",
						"type": "HttpClient",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					},
					{
						"name": "router",
						"type": "Router",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					},
					{
						"name": "storage",
						"type": "StorageService",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					}
				]
			},
			"extends": [],
			"type": "injectable"
		},
		{
			"name": "PlayerService",
			"id": "injectable-PlayerService-41dcfad9e3237bca786b0a35f6937702c9f13a87f2a292eb68b353054430b8f9f8780694a919e9dac5293677cb75207a3bf9171f1290ea95cad847a915ea5756",
			"file": "src/app/shared/services/player.service.ts",
			"properties": [
				{
					"name": "deviceId",
					"defaultValue": "''",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 20
				},
				{
					"name": "playbackState",
					"defaultValue": "new Subject<number>()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 17
				},
				{
					"name": "player",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Spotify.Player",
					"optional": true,
					"description": "",
					"line": 15
				},
				{
					"name": "playerState",
					"defaultValue": "new Subject<Spotify.PlaybackState>()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 16
				},
				{
					"name": "queue",
					"defaultValue": "new Subject<Queue>()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 19
				},
				{
					"name": "token",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"optional": false,
					"description": "",
					"line": 21
				},
				{
					"name": "updateDestroy$",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Subscription",
					"optional": false,
					"description": "",
					"line": 18
				}
			],
			"methods": [
				{
					"name": "destroyUpdateSubscriptions",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 108,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "getPlayerState",
					"args": [],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 94,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "initializePlayer",
					"args": [
						{
							"name": "token",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 29,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "token",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "playSong",
					"args": [
						{
							"name": "uris",
							"type": "string[]",
							"deprecated": false,
							"deprecationMessage": ""
						},
						{
							"name": "index",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 112,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "uris",
							"type": "string[]",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						},
						{
							"name": "index",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "setPosition",
					"args": [
						{
							"name": "position",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 152,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "position",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "setVolume",
					"args": [
						{
							"name": "volume",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 148,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "volume",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "skipNext",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 132,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "skipPrev",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 140,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "tooglePlay",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 128,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "updateSlider",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 98,
					"deprecated": false,
					"deprecationMessage": ""
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"description": "",
			"rawdescription": "\n",
			"sourceCode": "import { Queue } from './../interfaces/track';\nimport { Injectable, NgZone } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {\n  interval,\n  distinctUntilKeyChanged,\n  Subject,\n  Subscription,\n  tap,\n  fromEvent,\n} from 'rxjs';\n\n@Injectable()\nexport class PlayerService {\n  player?: Spotify.Player;\n  playerState = new Subject<Spotify.PlaybackState>();\n  playbackState = new Subject<number>();\n  updateDestroy$!: Subscription;\n  queue = new Subject<Queue>();\n  deviceId = '';\n  token!: string;\n\n  constructor(private http: HttpClient, private _zone: NgZone) {\n    this.queue.subscribe(({ queue, index }) => {\n      this.playSong(queue, index);\n    });\n  }\n\n  initializePlayer(token: string) {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      const player = new window.Spotify.Player({\n        name: 'Web Playback SDK Quick Start Player',\n        getOAuthToken: (cb: Function) => {\n          cb(token);\n        },\n        volume: 0.5,\n      });\n\n      // Error handling\n      player.addListener('initialization_error', ({ message }) => {\n        console.error(message);\n      });\n      player.addListener('authentication_error', ({ message }) => {\n        console.error(message);\n      });\n      player.addListener('account_error', ({ message }) => {});\n      player.addListener('playback_error', ({ message }) => {\n        console.error(message);\n      });\n\n      // Playback status updates\n      const playerChangedEvent = fromEvent<Spotify.PlaybackState>(\n        player,\n        'player_state_changed'\n      );\n      playerChangedEvent.subscribe((newState) => {\n        this._zone.run(() => {\n          this.playerState.next(newState);\n        });\n      });\n\n      playerChangedEvent\n        .pipe(distinctUntilKeyChanged('paused'))\n        .subscribe((newState) => {\n          this._zone.run(() => {\n            if (!newState.paused) {\n              this.updateSlider();\n            } else {\n              this.destroyUpdateSubscriptions();\n            }\n          });\n        });\n\n      // Ready\n      player.addListener('ready', ({ device_id }: { device_id: string }) => {\n        ('ready');\n        this.deviceId = device_id;\n      });\n\n      // Not Ready\n      player.addListener(\n        'not_ready',\n        ({ device_id }: { device_id: string }) => {\n          console.log('Device ID has gone offline', device_id);\n        }\n      );\n\n      // Connect to the player!\n      player.connect();\n      this.player = player;\n    };\n  }\n\n  getPlayerState() {\n    return this.playerState.asObservable();\n  }\n\n  updateSlider() {\n    this.updateDestroy$?.unsubscribe();\n    this.updateDestroy$ = interval(300).subscribe(() => {\n      this.player?.getCurrentState().then((state) => {\n        const position = state?.position ?? 0;\n        this.playbackState.next(position);\n      });\n    });\n  }\n\n  destroyUpdateSubscriptions() {\n    this.updateDestroy$.unsubscribe();\n  }\n\n  playSong(uris: string[], index: number) {\n    this.http\n      .put(`me/player/play?device_id=${this.deviceId}`, {\n        uris: uris,\n        offset: {\n          position: index,\n        },\n      })\n      .pipe(\n        tap(() => {\n          this.playbackState.next(1);\n        })\n      )\n      .subscribe();\n  }\n\n  tooglePlay() {\n    this.player?.togglePlay().then(() => {});\n  }\n\n  skipNext() {\n    this.destroyUpdateSubscriptions();\n    this.playbackState.next(1);\n    this.player?.nextTrack().then(() => {\n      this.updateSlider();\n    });\n  }\n\n  skipPrev() {\n    this.destroyUpdateSubscriptions();\n    this.playbackState.next(1);\n    this.player?.previousTrack().then(() => {\n      this.updateSlider();\n    });\n  }\n\n  setVolume(volume: number) {\n    this.player?.setVolume(volume).then(() => {});\n  }\n\n  setPosition(position: number) {\n    this.player?.seek(position).then(() => {});\n  }\n}\n",
			"constructorObj": {
				"name": "constructor",
				"description": "",
				"deprecated": false,
				"deprecationMessage": "",
				"args": [
					{
						"name": "http",
						"type": "HttpClient",
						"deprecated": false,
						"deprecationMessage": ""
					},
					{
						"name": "_zone",
						"type": "NgZone",
						"deprecated": false,
						"deprecationMessage": ""
					}
				],
				"line": 21,
				"jsdoctags": [
					{
						"name": "http",
						"type": "HttpClient",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					},
					{
						"name": "_zone",
						"type": "NgZone",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					}
				]
			},
			"extends": [],
			"type": "injectable"
		},
		{
			"name": "StorageService",
			"id": "injectable-StorageService-e29463c7531f987463d2805c96d36a16756afc4af2d6df0bb7a684d926079497b26aea2af09f816a7bf81327637fac0940ec978455bc28d64f851b5170ea849d",
			"file": "src/app/shared/services/storage.service.ts",
			"properties": [],
			"methods": [
				{
					"name": "getData",
					"args": [
						{
							"name": "key",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 7,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "key",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "removeData",
					"args": [
						{
							"name": "key",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 20,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "key",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "setData",
					"args": [
						{
							"name": "key",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						},
						{
							"name": "data",
							"type": "any",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 16,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "key",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						},
						{
							"name": "data",
							"type": "any",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"description": "",
			"rawdescription": "\n",
			"sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StorageService {\n  getData(key: string) {\n    const data = localStorage.getItem(key) ?? '';\n    if (localStorage.getItem(key)) {\n      return JSON.parse(data);\n    } else {\n      return '';\n    }\n  }\n\n  setData(key: string, data: any): void {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  removeData(key: string) {\n    localStorage.removeItem(key);\n  }\n}\n",
			"extends": [],
			"type": "injectable"
		},
		{
			"name": "TrackService",
			"id": "injectable-TrackService-66b7283ed8b29794ccafcbe6fa13aa5a8efba56cb1c33128a5df5a9d77f03685a4107194b471379d7e288561a293407416e9d3903296f3832dfbca72a4e67c9a",
			"file": "src/app/shared/services/track.service.ts",
			"properties": [
				{
					"name": "pageSize",
					"defaultValue": "6",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "number",
					"optional": false,
					"description": "",
					"line": 16,
					"modifierKind": [148]
				},
				{
					"name": "params",
					"defaultValue": "new HttpParams()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 15,
					"modifierKind": [123]
				}
			],
			"methods": [
				{
					"name": "checkUserSavedTracks",
					"args": [
						{
							"name": "trackIds",
							"type": "string[]",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 80,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "trackIds",
							"type": "string[]",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "deleteTrack",
					"args": [
						{
							"name": "trackId",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 96,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "trackId",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "getFeaturedPlaylists",
					"args": [],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 53,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "getPlaylistInfo",
					"args": [
						{
							"name": "id",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 63,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "id",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "getPlaylistTracks",
					"args": [
						{
							"name": "id",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						},
						{
							"name": "offset",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 30,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "id",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						},
						{
							"name": "offset",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "getSavedTracks",
					"args": [
						{
							"name": "offset",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 22,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "offset",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "getSearchResults",
					"args": [
						{
							"name": "query",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 70,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "query",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "getTopTracks",
					"args": [
						{
							"name": "offset",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 38,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "offset",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "getUserPlaylists",
					"args": [],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 46,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "saveTrack",
					"args": [
						{
							"name": "trackId",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 92,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "trackId",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "toggleShuffle",
					"args": [
						{
							"name": "state",
							"type": "boolean",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 104,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "state",
							"type": "boolean",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"description": "",
			"rawdescription": "\n",
			"sourceCode": "import { createQuery } from '../../utils/createQuery';\nimport {\n  FeaturedPlaylistResponse,\n  Playlist,\n  PlaylistResponse,\n} from './../interfaces/playlist';\nimport { TracksResponse, SearchResponse, Track } from './../interfaces/track';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrackService {\n  private params = new HttpParams();\n  readonly pageSize = 6;\n\n  constructor(private http: HttpClient) {\n    this.params = this.params.append('limit', this.pageSize);\n  }\n\n  getSavedTracks(offset: number) {\n    const params = this.params.append('offset', offset);\n    return createQuery(\n      ['savedTracks', { page: offset }] as const,\n      this.http.get<TracksResponse>(`me/tracks`, { params })\n    );\n  }\n\n  getPlaylistTracks(id: string, offset: number) {\n    const params = this.params.append('offset', offset);\n    return createQuery(\n      ['playlistTracks', { id, offset }] as const,\n      this.http.get<TracksResponse>(`playlists/${id}/tracks`, { params })\n    );\n  }\n\n  getTopTracks(offset: number) {\n    const params = this.params.append('offset', offset);\n    return createQuery(\n      ['topTracks', { offset }] as const,\n      this.http.get<TracksResponse<Track>>(`me/top/tracks`, { params })\n    );\n  }\n\n  getUserPlaylists() {\n    return createQuery(\n      ['userPlaylists'],\n      this.http.get<PlaylistResponse>(`me/playlists`)\n    );\n  }\n\n  getFeaturedPlaylists() {\n    const params = this.params.set('limit', 12);\n    return createQuery(\n      ['featuredPlaylists'] as const,\n      this.http.get<FeaturedPlaylistResponse>(`browse/featured-playlists`, {\n        params,\n      })\n    );\n  }\n\n  getPlaylistInfo(id: string) {\n    return createQuery(\n      ['playlistInfo', { id }] as const,\n      this.http.get<Playlist>(`playlists/${id}`)\n    );\n  }\n\n  getSearchResults(query: string) {\n    return createQuery(\n      ['searchResults', { query }] as const,\n      this.http.get<SearchResponse>(`search`, {\n        params: { q: query, type: ['track'], limit: 10 },\n      }),\n      !!query\n    );\n  }\n\n  checkUserSavedTracks(trackIds: string[]) {\n    return createQuery(\n      ['isSavedTrack', { trackIds }] as const,\n      this.http.get<boolean[]>(`me/tracks/contains`, {\n        params: {\n          ids: trackIds,\n        },\n      }),\n      !!trackIds.length\n    );\n  }\n\n  saveTrack(trackId: string) {\n    return this.http.put<void>(`me/tracks`, { ids: [trackId] });\n  }\n\n  deleteTrack(trackId: string) {\n    return this.http.delete<void>(`me/tracks`, {\n      body: {\n        ids: [trackId],\n      },\n    });\n  }\n\n  toggleShuffle(state: boolean) {\n    return this.http.put<void>(`me/player/shuffle?state=${state}`, {});\n  }\n}\n",
			"constructorObj": {
				"name": "constructor",
				"description": "",
				"deprecated": false,
				"deprecationMessage": "",
				"args": [
					{
						"name": "http",
						"type": "HttpClient",
						"deprecated": false,
						"deprecationMessage": ""
					}
				],
				"line": 16,
				"jsdoctags": [
					{
						"name": "http",
						"type": "HttpClient",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					}
				]
			},
			"extends": [],
			"type": "injectable"
		},
		{
			"name": "UserService",
			"id": "injectable-UserService-6d78b7cace503c7f2d81b10812b3f73ecbfc7175533cee4059d1793c53c5b6ed711b8f3c2421bdde5b5dc378e9d61ffbb4de04cc02376a47562dbaf65280afed",
			"file": "src/app/shared/services/user.service.ts",
			"properties": [
				{
					"name": "authService",
					"defaultValue": "inject(AuthService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 13,
					"modifierKind": [123]
				},
				{
					"name": "http",
					"defaultValue": "inject(HttpClient)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 12,
					"modifierKind": [123]
				}
			],
			"methods": [
				{
					"name": "getUserData",
					"args": [],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 15,
					"deprecated": false,
					"deprecationMessage": ""
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"description": "",
			"rawdescription": "\n",
			"sourceCode": "import { AuthService } from './auth.service';\nimport { User } from './../interfaces/user';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable, inject } from '@angular/core';\nimport { createQuery } from '../../utils/createQuery';\nimport { tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  private http = inject(HttpClient);\n  private authService = inject(AuthService);\n\n  getUserData() {\n    return createQuery(\n      ['userData'] as const,\n      this.http.get<User>(`me`).pipe(\n        tap(() => {\n          this.authService.loggedIn.next(true);\n        })\n      )\n    );\n  }\n}\n",
			"extends": [],
			"type": "injectable"
		}
	],
	"guards": [],
	"interceptors": [
		{
			"name": "AuthInterceptor",
			"id": "injectable-AuthInterceptor-ba0fffbab7de06faee84d5a06696ed783bedcf29de80f1114f91e5615b4ae1eb12dd259c29bef7c9b75ca06412b919fc37aab9e89b26bba8b8af30d93f6d0405",
			"file": "src/app/shared/interceptors/auth.interceptor.ts",
			"properties": [
				{
					"name": "authService",
					"defaultValue": "inject(AuthService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 15,
					"modifierKind": [123]
				}
			],
			"methods": [
				{
					"name": "handle401Error",
					"args": [
						{
							"name": "req",
							"type": "HttpRequest<>",
							"deprecated": false,
							"deprecationMessage": ""
						},
						{
							"name": "next",
							"type": "HttpHandler",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "(error: any) => any",
					"typeParameters": [],
					"line": 52,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "req",
							"type": "HttpRequest<>",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						},
						{
							"name": "next",
							"type": "HttpHandler",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "intercept",
					"args": [
						{
							"name": "req",
							"type": "HttpRequest<>",
							"deprecated": false,
							"deprecationMessage": ""
						},
						{
							"name": "next",
							"type": "HttpHandler",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "Observable<HttpEvent<>>",
					"typeParameters": [],
					"line": 17,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "req",
							"type": "HttpRequest<>",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						},
						{
							"name": "next",
							"type": "HttpHandler",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"description": "",
			"rawdescription": "\n",
			"sourceCode": "import { Injectable, inject } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { catchError, Observable, switchMap, take, throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { BASE_URL } from '../../utils/config';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  private authService = inject(AuthService);\n\n  intercept(\n    req: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    const token = this.authService.token;\n    if (token) {\n      let modifiedReq = req;\n      if (!req.url.includes('/token')) {\n        // add authorization header to request if we not requesting /token path\n        modifiedReq = req.clone({\n          headers: req.headers.set('Authorization', `Bearer ${token}`),\n          url: `${BASE_URL}${req.url}`,\n        });\n      }\n\n      return next.handle(modifiedReq).pipe(\n        catchError((error: HttpErrorResponse) => {\n          // refresh token if 401 error\n          if (error.status === 401)\n            return this.handle401Error(modifiedReq, next)(error);\n\n          // if other error logout user\n          this.authService.logout();\n          return throwError(() => error);\n        })\n      );\n    }\n\n    return next.handle(req).pipe(\n      catchError((err) => {\n        return throwError(() => err);\n      })\n    );\n  }\n\n  handle401Error(req: HttpRequest<unknown>, next: HttpHandler) {\n    return (error: any) => {\n      if (req.url.includes('/token')) {\n        this.authService.logout();\n        return throwError(() => error);\n      }\n\n      return this.authService.getRefreshToken().pipe(\n        switchMap((authData) => {\n          const modifiedReq = req.clone({\n            headers: req.headers.set(\n              'Authorization',\n              `Bearer ${authData.access_token}`\n            ),\n            url: req.url,\n          });\n          return next.handle(modifiedReq);\n        }),\n        catchError((error) => {\n          this.authService.logout();\n          return throwError(() => error);\n        })\n      );\n    };\n  }\n}\n",
			"extends": [],
			"type": "interceptor"
		},
		{
			"name": "MockBackendInterceptor",
			"id": "injectable-MockBackendInterceptor-8ac1d092dd2f6351f0f3b6cf7d783527a767f0675e2c299e8a74af10f71580d81e102357fc00ddc518bc658a9014b54a7580c77eda758dc50d07f430b8246182",
			"file": "src/tests/mock-backend.interceptor.ts",
			"properties": [],
			"methods": [
				{
					"name": "intercept",
					"args": [
						{
							"name": "req",
							"type": "HttpRequest<any>",
							"deprecated": false,
							"deprecationMessage": ""
						},
						{
							"name": "next",
							"type": "HttpHandler",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse | HttpUserEvent>",
					"typeParameters": [],
					"line": 36,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "req",
							"type": "HttpRequest<any>",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						},
						{
							"name": "next",
							"type": "HttpHandler",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"description": "",
			"rawdescription": "\n",
			"sourceCode": "import {\n  HttpHandler,\n  HttpHeaderResponse,\n  HttpInterceptor,\n  HttpProgressEvent,\n  HttpRequest,\n  HttpResponse,\n  HttpSentEvent,\n  HttpUserEvent,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, delay } from 'rxjs';\nimport { User } from '../app/shared/interfaces/user';\nimport {\n  FeaturedPlaylistResponse,\n  Playlist,\n  PlaylistResponse,\n} from '../app/shared/interfaces/playlist';\nimport {\n  featuredPlaylists,\n  playlist,\n  playlistTracks,\n  playlistsResponse,\n  savedTracks,\n  searchResponse,\n  user,\n} from './mocks';\nimport {\n  SearchResponse,\n  Track,\n  TracksResponse,\n} from 'src/app/shared/interfaces/track';\n\n@Injectable()\nexport class MockBackendInterceptor implements HttpInterceptor {\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<\n    | HttpSentEvent\n    | HttpHeaderResponse\n    | HttpProgressEvent\n    | HttpResponse<any>\n    | HttpUserEvent<any>\n  > {\n    if (req.url.endsWith('me') && req.method == 'GET') {\n      return new Observable<HttpResponse<User>>((observer) => {\n        observer.next(\n          new HttpResponse<User>({\n            body: user,\n            status: 200,\n          })\n        );\n        observer.complete();\n      }).pipe(delay(200));\n    }\n\n    if (req.url.endsWith('playlists') && req.method == 'GET') {\n      return new Observable<HttpResponse<PlaylistResponse>>((observer) => {\n        observer.next(\n          new HttpResponse<PlaylistResponse>({\n            body: playlistsResponse,\n            status: 200,\n          })\n        );\n        observer.complete();\n      }).pipe(delay(200));\n    }\n\n    if (\n      req.url.endsWith('playlists/50Gsv3p7qLLPVzfPBu8UcO') &&\n      req.method == 'GET'\n    ) {\n      return new Observable<HttpResponse<Playlist>>((observer) => {\n        observer.next(\n          new HttpResponse<Playlist>({\n            body: playlist,\n            status: 200,\n          })\n        );\n        observer.complete();\n      }).pipe(delay(200));\n    }\n\n    if (req.url.endsWith('browse/featured-playlists') && req.method == 'GET') {\n      return new Observable<HttpResponse<FeaturedPlaylistResponse>>(\n        (observer) => {\n          observer.next(\n            new HttpResponse<FeaturedPlaylistResponse>({\n              body: featuredPlaylists,\n              status: 200,\n            })\n          );\n          observer.complete();\n        }\n      ).pipe(delay(200));\n    }\n\n    if (req.url.endsWith('me/tracks') && req.method == 'GET') {\n      return new Observable((observer) => {\n        observer.next(\n          new HttpResponse<TracksResponse>({\n            body: savedTracks,\n            status: 200,\n          })\n        );\n        observer.complete();\n      });\n    }\n\n    if (req.url.endsWith('search') && req.method == 'GET') {\n      return new Observable<HttpResponse<SearchResponse>>((observer) => {\n        observer.next(\n          new HttpResponse<SearchResponse>({\n            body: searchResponse,\n            status: 200,\n          })\n        );\n        observer.complete();\n      }).pipe(delay(200));\n    }\n\n    if (req.url.match(/playlists\\/.*\\/tracks/)) {\n      return new Observable<HttpResponse<TracksResponse>>((observer) => {\n        observer.next(\n          new HttpResponse<TracksResponse>({\n            body: playlistTracks,\n            status: 200,\n          })\n        );\n        observer.complete();\n      }).pipe(delay(200));\n    }\n\n    if (req.url.endsWith('me/top/tracks')) {\n      return new Observable<HttpResponse<TracksResponse<Track>>>((observer) => {\n        observer.next(\n          new HttpResponse<TracksResponse<Track>>({\n            body: {\n              ...savedTracks,\n              items: savedTracks.items.map((item) => ({\n                ...item.track,\n              })),\n            },\n            status: 200,\n          })\n        );\n        observer.complete();\n      }).pipe(delay(200));\n    }\n    // pass through other requests.\n    return next.handle(req);\n  }\n}\n",
			"extends": [],
			"type": "interceptor"
		}
	],
	"classes": [],
	"directives": [
		{
			"name": "ButtonDirective",
			"id": "directive-ButtonDirective-a6a68aba0584878a44d74a6755499a85b9a4c48fa76cd3714c2d24382cc9ca30788095b34c054d6057a261500db0e2bce70c4e4bb24c6d4a08160ce3d826b32a",
			"file": "src/app/shared/button/button.directive.ts",
			"type": "directive",
			"description": "",
			"rawdescription": "\n",
			"sourceCode": "import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Renderer2,\n  input,\n} from '@angular/core';\n\nexport type ButtonMode = 'text' | 'opacity';\n\n@Directive({\n  selector: '[appButton]',\n  standalone: true,\n})\nexport class ButtonDirective implements OnInit {\n  mode = input<ButtonMode>();\n  rippleSpan?: HTMLElement;\n  protected _elementClass: string[] = ['btn'];\n\n  @HostBinding('class')\n  get elementClass(): string {\n    return this._elementClass.join(' ');\n  }\n\n  set(val: string) {\n    this._elementClass = val.split(' ');\n  }\n\n  ngOnInit(): void {\n    const buttonMode = this.mode();\n    if (buttonMode)\n      this._elementClass = [...this._elementClass, `btn-${buttonMode}`];\n\n    const rippleSpan = this.renderer.createElement('span');\n    rippleSpan.classList.add('ripple');\n    this.renderer.appendChild(this.el.nativeElement, rippleSpan);\n    this.rippleSpan = rippleSpan;\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent) {\n    const btn = this.el.nativeElement as HTMLElement;\n    const diameter = Math.max(btn.offsetWidth, btn.offsetHeight);\n    const x = event.clientX - (btn.offsetLeft + diameter / 2);\n    const y = event.clientY - (btn.offsetTop + diameter / 2);\n\n    if (this.rippleSpan) {\n      this.rippleSpan.style.width =\n        this.rippleSpan.style.height = `${diameter}px`;\n      this.rippleSpan.style.left = `${x}px`;\n      this.rippleSpan.style.top = `${y}px`;\n    }\n\n    const animation = this.rippleSpan?.animate(\n      [\n        {\n          transform: 'scale(0)',\n          opacity: 1,\n        },\n        {\n          transform: 'scale(2.5)',\n          opacity: 0,\n        },\n      ],\n      300\n    );\n\n    animation?.play();\n  }\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n}\n",
			"selector": "[appButton]",
			"providers": [],
			"hostDirectives": [],
			"standalone": true,
			"inputsClass": [],
			"outputsClass": [],
			"deprecated": false,
			"deprecationMessage": "",
			"hostBindings": [
				{
					"name": "class",
					"deprecated": false,
					"deprecationMessage": "",
					"line": 23,
					"type": "string",
					"decorators": []
				}
			],
			"hostListeners": [
				{
					"name": "click",
					"args": [
						{
							"name": "event",
							"type": "MouseEvent",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"argsDecorator": ["$event"],
					"deprecated": false,
					"deprecationMessage": "",
					"line": 43
				}
			],
			"propertiesClass": [
				{
					"name": "_elementClass",
					"defaultValue": "['btn']",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string[]",
					"optional": false,
					"description": "",
					"line": 20,
					"modifierKind": [124]
				},
				{
					"name": "mode",
					"defaultValue": "input<ButtonMode>()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 18
				},
				{
					"name": "rippleSpan",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "HTMLElement",
					"optional": true,
					"description": "",
					"line": 19
				}
			],
			"methodsClass": [
				{
					"name": "ngOnInit",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 31,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "onClick",
					"args": [
						{
							"name": "event",
							"type": "MouseEvent",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 43,
					"deprecated": false,
					"deprecationMessage": "",
					"decorators": [
						{
							"name": "HostListener",
							"stringifiedArguments": "'click', ['$event']"
						}
					],
					"modifierKind": [170],
					"jsdoctags": [
						{
							"name": "event",
							"type": "MouseEvent",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "set",
					"args": [
						{
							"name": "val",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 27,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "val",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			],
			"extends": [],
			"implements": ["OnInit"],
			"constructorObj": {
				"name": "constructor",
				"description": "",
				"deprecated": false,
				"deprecationMessage": "",
				"args": [
					{
						"name": "el",
						"type": "ElementRef",
						"deprecated": false,
						"deprecationMessage": ""
					},
					{
						"name": "renderer",
						"type": "Renderer2",
						"deprecated": false,
						"deprecationMessage": ""
					}
				],
				"line": 71,
				"jsdoctags": [
					{
						"name": "el",
						"type": "ElementRef",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					},
					{
						"name": "renderer",
						"type": "Renderer2",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					}
				]
			},
			"accessors": {
				"elementClass": {
					"name": "elementClass",
					"getSignature": {
						"name": "elementClass",
						"type": "string",
						"returnType": "string",
						"line": 23
					}
				}
			}
		}
	],
	"components": [
		{
			"name": "AppComponent",
			"id": "component-AppComponent-10e5422cb68761aabcdb024a7fa3702129e9ed6484fd85cafd947fc1a8622e06d8b2588bc728ce4160915f4d8d9ccbb4fd645dd996ac7d8c2c8e8a1934a13b5f",
			"file": "src/app/app.component.ts",
			"encapsulation": [],
			"entryComponents": [],
			"inputs": [],
			"outputs": [],
			"providers": [
				{
					"name": "PlayerService",
					"type": "injectable"
				}
			],
			"selector": "app-root",
			"styleUrls": ["./app.component.scss"],
			"styles": [],
			"templateUrl": ["./app.component.html"],
			"viewProviders": [],
			"hostDirectives": [],
			"inputsClass": [],
			"outputsClass": [],
			"propertiesClass": [
				{
					"name": "auth",
					"defaultValue": "this.authService.authData.pipe(\n    tap((authData) => {\n      if (!authData) return;\n      this.initSpotifyScript(authData.access_token);\n    }),\n    takeUntilDestroyed()\n  )",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 46,
					"modifierKind": [123]
				},
				{
					"name": "authService",
					"defaultValue": "inject(AuthService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 39,
					"modifierKind": [123]
				},
				{
					"name": "document",
					"defaultValue": "inject(DOCUMENT)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "<p>TODO:</p>\n<ul>\n<li>feature: rewrite paginated list to infinine scroll</li>\n</ul>\n",
					"line": 38,
					"rawdescription": "\n\nTODO:\n* feature: rewrite paginated list to infinine scroll\n",
					"modifierKind": [123]
				},
				{
					"name": "isProductionMode",
					"defaultValue": "environment.production",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 54
				},
				{
					"name": "loggedIn",
					"defaultValue": "toSignal(this.authService.loggedIn)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 42
				},
				{
					"name": "menuOpen",
					"defaultValue": "signal(false)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 43
				},
				{
					"name": "playerService",
					"defaultValue": "inject(PlayerService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 41,
					"modifierKind": [123]
				},
				{
					"name": "playerState",
					"defaultValue": "this.playerService.getPlayerState()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 53
				},
				{
					"name": "userData",
					"defaultValue": "injectQuery(() => this.userService.getUserData())",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 44
				},
				{
					"name": "userService",
					"defaultValue": "inject(UserService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 40,
					"modifierKind": [123]
				}
			],
			"methodsClass": [
				{
					"name": "initSpotifyScript",
					"args": [
						{
							"name": "token",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 60,
					"deprecated": false,
					"deprecationMessage": "",
					"modifierKind": [123],
					"jsdoctags": [
						{
							"name": "token",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "login",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 77,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "ngOnInit",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 68,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "toggleMenu",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 56,
					"deprecated": false,
					"deprecationMessage": ""
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"hostBindings": [],
			"hostListeners": [],
			"standalone": true,
			"imports": [
				{
					"name": "RouterModule",
					"type": "module"
				},
				{
					"name": "NavbarComponent",
					"type": "component"
				},
				{
					"name": "IconComponent",
					"type": "component"
				},
				{
					"name": "PlayerComponent",
					"type": "component"
				},
				{
					"name": "AngularQueryDevtools"
				},
				{
					"name": "CommonModule",
					"type": "module"
				},
				{
					"name": "ButtonDirective",
					"type": "directive"
				}
			],
			"description": "",
			"rawdescription": "\n",
			"type": "component",
			"sourceCode": "import { takeUntilDestroyed, toSignal } from '@angular/core/rxjs-interop';\nimport { tap } from 'rxjs';\nimport { AuthService } from './shared/services/auth.service';\nimport { UserService } from './shared/services/user.service';\nimport { Component, OnInit, signal, inject } from '@angular/core';\nimport { PlayerService } from './shared/services/player.service';\nimport { environment } from '../environments/environment';\nimport { RouterModule } from '@angular/router';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { IconComponent } from './shared/icon/icon.component';\nimport { PlayerComponent } from './player/player.component';\nimport { AngularQueryDevtools } from '@tanstack/angular-query-devtools-experimental';\nimport { CommonModule, DOCUMENT } from '@angular/common';\nimport { injectQuery } from '@tanstack/angular-query-experimental';\nimport { ButtonDirective } from './shared/button/button.directive';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  standalone: true,\n  imports: [\n    RouterModule,\n    NavbarComponent,\n    IconComponent,\n    PlayerComponent,\n    AngularQueryDevtools,\n    CommonModule,\n    ButtonDirective,\n  ],\n  providers: [PlayerService],\n})\nexport class AppComponent implements OnInit {\n  /**\n   * TODO:\n   * * feature: rewrite paginated list to infinine scroll\n   */\n  private document = inject(DOCUMENT);\n  private authService = inject(AuthService);\n  private userService = inject(UserService);\n  private playerService = inject(PlayerService);\n  loggedIn = toSignal(this.authService.loggedIn);\n  menuOpen = signal(false);\n  userData = injectQuery(() => this.userService.getUserData());\n\n  private auth = this.authService.authData.pipe(\n    tap((authData) => {\n      if (!authData) return;\n      this.initSpotifyScript(authData.access_token);\n    }),\n    takeUntilDestroyed()\n  );\n  playerState = this.playerService.getPlayerState();\n  isProductionMode = environment.production;\n\n  toggleMenu() {\n    this.menuOpen.set(!this.menuOpen());\n  }\n\n  private initSpotifyScript(token: string) {\n    this.playerService.initializePlayer(token);\n    const script = this.document.createElement('script');\n    script.src = 'https://sdk.scdn.co/spotify-player.js';\n    script.type = 'text/javascript';\n    this.document.head.appendChild(script);\n  }\n\n  ngOnInit() {\n    if (location.search) {\n      this.authService\n        .getToken()\n        .subscribe(() => setTimeout(() => window.location.reload(), 0));\n    }\n    this.auth.subscribe();\n  }\n\n  login() {\n    this.authService.login();\n  }\n}\n",
			"assetsDirs": [],
			"styleUrlsData": [
				{
					"data": ".app {\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  height: 100%;\n\n  .main {\n    margin-left: 0;\n    width: 100%;\n    overflow-y: auto;\n    background-color: #35393c;\n    padding: 24px 16px 16px;\n\n    &--player {\n      margin-bottom: 140px;\n    }\n\n    @media screen and (min-width: 980px) {\n      margin-left: 220px;\n    }\n  }\n\n  .app-menu-button {\n    position: absolute;\n    top: 16px;\n    left: 16px;\n    z-index: 3;\n    display: block;\n\n    @media screen and (min-width: 980px) {\n      display: none;\n    }\n  }\n\n  .app-login {\n    width: 100%;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    background-color: #35393c;\n  }\n\n  .app-login__button {\n    font-size: 1.6rem;\n    padding: 16px 48px;\n    border-radius: 32px;\n    text-transform: uppercase;\n  }\n\n  .app-login__title-wrapper {\n    display: flex;\n    gap: 8px;\n    align-items: center;\n    margin-bottom: 32px;\n  }\n\n  .app-login__title {\n    font-size: 4.4rem;\n    margin-bottom: 0;\n  }\n\n  .app-login__text {\n    font-size: 2.8rem;\n    margin-bottom: 48px;\n  }\n}",
					"styleUrl": "./app.component.scss"
				}
			],
			"stylesData": "",
			"extends": [],
			"implements": ["OnInit"],
			"templateData": "<div class=\"app\">\n  @if(loggedIn() === false){\n  <div class=\"app-login\">\n    <div class=\"app-login__title-wrapper\">\n      <app-icon class=\"icon--large\" type=\"logo\"></app-icon>\n      <h1 class=\"app-login__title\">Spotrx</h1>\n    </div>\n    <p class=\"app-login__text\">To use app you must log in</p>\n    <button type=\"button\" appButton class=\"app-login__button\" (click)=\"login()\">login</button>\n  </div>\n  }\n\n  @if(userData.isSuccess()){\n  <app-navbar [userData]=\"userData.data()\" [open]=\"menuOpen()\" (toggleMenu)=\"menuOpen.set($event)\"></app-navbar>\n  <button type=\"button\" appButton aria-label=\"menu\" [mode]=\"'opacity'\" class=\"app-menu-button\" (click)=\"toggleMenu()\">\n    <app-icon class=\"icon\" type=\"menu\"></app-icon>\n  </button>\n  <main class=\"main\" [ngClass]=\"{\n  'main--player': playerState | async }\">\n    <router-outlet></router-outlet>\n  </main>\n  <app-player></app-player>\n  }\n  @if(!isProductionMode){\n  <angular-query-devtools />\n  }\n</div>"
		},
		{
			"name": "HomeComponent",
			"id": "component-HomeComponent-99190c8fbde40842b4cc16c9e1c411f14bdae5629d0579a90a9270bbb617db34e29f4584ae5e4728b55e90f22e29fc14487381d5f00de70d2c0016c0a246d5de",
			"file": "src/app/home/home.component.ts",
			"encapsulation": [],
			"entryComponents": [],
			"inputs": [],
			"outputs": [],
			"providers": [],
			"selector": "app-home",
			"styleUrls": ["./home.component.scss"],
			"styles": [],
			"templateUrl": ["./home.component.html"],
			"viewProviders": [],
			"hostDirectives": [],
			"inputsClass": [],
			"outputsClass": [],
			"propertiesClass": [
				{
					"name": "featuredPlaylists",
					"defaultValue": "injectQuery(() =>\n    this.trackService.getFeaturedPlaylists()\n  )",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 22,
					"modifierKind": [125]
				},
				{
					"name": "skeletonLoadingArray",
					"defaultValue": "Array.from({ length: 12 }, () => null)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 25,
					"modifierKind": [148]
				},
				{
					"name": "trackService",
					"defaultValue": "inject(TrackService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 21,
					"modifierKind": [123]
				}
			],
			"methodsClass": [],
			"deprecated": false,
			"deprecationMessage": "",
			"hostBindings": [],
			"hostListeners": [],
			"standalone": true,
			"imports": [
				{
					"name": "RouterModule",
					"type": "module"
				},
				{
					"name": "CommonModule",
					"type": "module"
				},
				{
					"name": "NgOptimizedImage"
				},
				{
					"name": "NgxSkeletonLoaderModule",
					"type": "module"
				}
			],
			"description": "",
			"rawdescription": "\n",
			"type": "component",
			"sourceCode": "import { TrackService } from '../shared/services/track.service';\nimport { Component, inject } from '@angular/core';\nimport { injectQuery } from '@tanstack/angular-query-experimental';\nimport { CommonModule, NgOptimizedImage } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NgxSkeletonLoaderModule } from 'ngx-skeleton-loader';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n  standalone: true,\n  imports: [\n    RouterModule,\n    CommonModule,\n    NgOptimizedImage,\n    NgxSkeletonLoaderModule,\n  ],\n})\nexport class HomeComponent {\n  private trackService = inject(TrackService);\n  public featuredPlaylists = injectQuery(() =>\n    this.trackService.getFeaturedPlaylists()\n  );\n  readonly skeletonLoadingArray = Array.from({ length: 12 }, () => null);\n}\n",
			"assetsDirs": [],
			"styleUrlsData": [
				{
					"data": ".home {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  .track-list {\n    width: 100%;\n  }\n\n  .title {\n    margin-bottom: 32px;\n  }\n\n  .playlist {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: flex-start;\n    padding: 16px 20px;\n    border-radius: 10px;\n    transition: background-color 0.3s;\n    cursor: pointer;\n    text-decoration: none;\n\n    &:hover {\n      background-color: #2c2f31;\n    }\n  }\n\n  .playlist-img {\n    display: block;\n    max-width: 125px;\n    max-height: 125px;\n    height: 125px;\n    object-fit: cover;\n    border-radius: 10px;\n    margin-bottom: 10px;\n    overflow: hidden;\n\n    @media screen and (min-width: 980px) {\n      max-width: 200px;\n      max-height: 200px;\n      height: 200px;\n    }\n  }\n\n  .playlist-title {\n    margin-bottom: 0;\n    color: #fff;\n    text-decoration: none;\n    text-align: center;\n    max-width: 125px;\n    overflow: hidden;\n\n    @media screen and (min-width: 980px) {\n      max-width: 200px;\n    }\n  }\n\n  .playlist-list {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto;\n    gap: 16px;\n\n    @media screen and (min-width: 980px) {\n      grid-template-columns: 1fr 1fr;\n    }\n\n    @media screen and (min-width: 1280px) {\n      grid-template-columns: 1fr 1fr 1fr 1fr;\n    }\n  }\n}\n",
					"styleUrl": "./home.component.scss"
				}
			],
			"stylesData": "",
			"extends": [],
			"templateData": "<div class=\"home\">\n  <h1 class=\"title\">Home 😎</h1>\n @if(featuredPlaylists.isSuccess()){\n  <div class=\"playlist-list\">\n    <a class=\"link\" [routerLink]=\"['/playlist', item.id]\" class=\"playlist\"\n      *ngFor=\"let item of featuredPlaylists.data().playlists?.items\">\n      <img priority class=\"playlist-img\" height=\"200\" width=\"200\" [ngSrc]=\"item.images[0].url\">\n      <h2 class=\"playlist-title\">{{item.name}}</h2>\n    </a>\n  </div>\n  } \n  @if(featuredPlaylists.isLoading()){\n  <div class=\"playlist-list\">\n    <div class=\"link\" class=\"playlist\" *ngFor=\"let item of skeletonLoadingArray\">\n      <ngx-skeleton-loader class=\"playlist-img\" animation=\"progress-dark\" count=\"1\"\n        [theme]=\"{ height: '200px', width: '200px', 'background-color': '#2c2f31' }\"></ngx-skeleton-loader>\n      <ngx-skeleton-loader class=\"playlist-title\" animation=\"progress-dark\" count=\"1\"\n        [theme]=\"{ height: '24px', width: '200px', 'background-color': '#2c2f31' }\"></ngx-skeleton-loader>\n    </div>\n  </div>\n  }\n</div>"
		},
		{
			"name": "IconComponent",
			"id": "component-IconComponent-5c4079716abbb28571b47055989c548baa70e680a52e973d6c624a098b3c5133b1025249848dded9c58f876cb1b945f0c7d928bd22873153b3d15e91b3c003bc",
			"file": "src/app/shared/icon/icon.component.ts",
			"encapsulation": ["ViewEncapsulation.None"],
			"entryComponents": [],
			"host": {},
			"inputs": [],
			"outputs": [],
			"providers": [],
			"selector": "app-icon",
			"styleUrls": ["./icon.component.scss"],
			"styles": [],
			"template": "<span class=\"icon\" [outerHTML]=\"icon\"></span>",
			"templateUrl": [],
			"viewProviders": [],
			"hostDirectives": [],
			"inputsClass": [],
			"outputsClass": [],
			"propertiesClass": [
				{
					"name": "icon",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "SafeHtml",
					"optional": false,
					"description": "",
					"line": 22
				},
				{
					"name": "sanitizer",
					"defaultValue": "inject(DomSanitizer)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 20,
					"modifierKind": [123]
				},
				{
					"name": "type",
					"defaultValue": "input.required<Icons>()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 21
				}
			],
			"methodsClass": [
				{
					"name": "ngOnChanges",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 24,
					"deprecated": false,
					"deprecationMessage": ""
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"hostBindings": [],
			"hostListeners": [],
			"standalone": true,
			"imports": [],
			"description": "",
			"rawdescription": "\n",
			"type": "component",
			"sourceCode": "import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Icons, icons } from '../../utils/icons';\nimport {\n  Component,\n  OnChanges,\n  ViewEncapsulation,\n  inject,\n  input,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-icon',\n  template: `<span class=\"icon\" [outerHTML]=\"icon\"></span>`,\n  styleUrls: ['./icon.component.scss'],\n  host: { class: 'app-icon' },\n  encapsulation: ViewEncapsulation.None,\n  standalone: true,\n})\nexport class IconComponent implements OnChanges {\n  private sanitizer = inject(DomSanitizer);\n  type = input.required<Icons>();\n  icon!: SafeHtml;\n\n  ngOnChanges(): void {\n    this.icon = this.sanitizer.bypassSecurityTrustHtml(icons[this.type()]);\n  }\n}\n",
			"assetsDirs": [],
			"styleUrlsData": [
				{
					"data": ".app-icon {\n  display: flex;\n\n  svg {\n    width: 24px;\n    height: 24px;\n    color: #fff;\n  }\n\n  &.primary svg {\n    color: #1ecd5d;\n  }\n\n  &.icon--large {\n    svg {\n      width: 32px;\n      height: 32px;\n    }\n  }\n}\n",
					"styleUrl": "./icon.component.scss"
				}
			],
			"stylesData": "",
			"extends": [],
			"implements": ["OnChanges"]
		},
		{
			"name": "NavbarComponent",
			"id": "component-NavbarComponent-06d90b13217c2d08de60107300dc6438defb26551a6dfaf3c8cc3b47c74d466e070e4b20917ab76c5643a4527f78eb49bc82d48ed8dfd0d0989477ca9a8ed228",
			"file": "src/app/navbar/navbar.component.ts",
			"encapsulation": [],
			"entryComponents": [],
			"inputs": [],
			"outputs": [],
			"providers": [],
			"selector": "app-navbar",
			"styleUrls": ["./navbar.component.scss"],
			"styles": [],
			"templateUrl": ["./navbar.component.html"],
			"viewProviders": [],
			"hostDirectives": [],
			"inputsClass": [],
			"outputsClass": [
				{
					"name": "toggleMenu",
					"defaultValue": "new EventEmitter<boolean>()",
					"deprecated": false,
					"deprecationMessage": "",
					"line": 24,
					"type": "EventEmitter<boolean>"
				}
			],
			"propertiesClass": [
				{
					"name": "open",
					"defaultValue": "input(false)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 23
				},
				{
					"name": "trackService",
					"defaultValue": "inject(TrackService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 20
				},
				{
					"name": "userData",
					"defaultValue": "input.required<User>()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 21
				},
				{
					"name": "userPlaylists",
					"defaultValue": "injectQuery(() => this.trackService.getUserPlaylists())",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 22
				},
				{
					"name": "userService",
					"defaultValue": "inject(UserService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 19
				}
			],
			"methodsClass": [
				{
					"name": "closeMenu",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 26,
					"deprecated": false,
					"deprecationMessage": ""
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"hostBindings": [],
			"hostListeners": [],
			"standalone": true,
			"imports": [
				{
					"name": "IconComponent",
					"type": "component"
				},
				{
					"name": "RouterModule",
					"type": "module"
				},
				{
					"name": "MatIconModule",
					"type": "module"
				},
				{
					"name": "CommonModule",
					"type": "module"
				}
			],
			"description": "",
			"rawdescription": "\n",
			"type": "component",
			"sourceCode": "import { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { injectQuery } from '@tanstack/angular-query-experimental';\nimport { TrackService } from '../shared/services/track.service';\nimport { UserService } from '../shared/services/user.service';\nimport { Component, inject, input, EventEmitter, Output } from '@angular/core';\nimport { IconComponent } from '../shared/icon/icon.component';\nimport { CommonModule } from '@angular/common';\nimport { User } from '../shared/interfaces/user';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss'],\n  standalone: true,\n  imports: [IconComponent, RouterModule, MatIconModule, CommonModule],\n})\nexport class NavbarComponent {\n  userService = inject(UserService);\n  trackService = inject(TrackService);\n  userData = input.required<User>();\n  userPlaylists = injectQuery(() => this.trackService.getUserPlaylists());\n  open = input(false);\n  @Output() toggleMenu: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  closeMenu() {\n    this.toggleMenu.emit(false);\n  }\n}\n",
			"assetsDirs": [],
			"styleUrlsData": [
				{
					"data": ".nav {\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  background-color: #2c2f31;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  overflow: hidden;\n  z-index: 2;\n  padding: 48px 8px 8px 8px;\n  transform: translateX(-100%);\n  transition: transform 0.2s;\n  max-width: 200px;\n\n  &--open {\n    transform: translateX(0);\n  }\n\n  @media screen and (min-width: 980px) {\n    padding: 0px 8px 8px 8px;\n    max-width: 200px;\n    transform: translateX(0);\n  }\n\n\n  .user-data {\n    display: flex;\n    align-items: center;\n  }\n\n  .user-img {\n    width: 48px;\n    height: 48px;\n    margin-right: 10px;\n    object-fit: cover;\n    border-radius: 5px;\n  }\n\n  .nav-links {\n    list-style-type: none;\n    padding-left: 0;\n    flex: 0;\n\n    .link {\n      color: #fff;\n      text-decoration: none;\n      display: flex;\n      justify-content: flex-start;\n      align-items: center;\n      width: 100%;\n      padding: 10px 20px;\n      box-sizing: border-box;\n\n      border-radius: 10px;\n      margin-bottom: 10px;\n      transition: background-color 0.3s;\n\n      &:hover {\n        background-color: rgba(#fff, 0.05);\n      }\n    }\n  }\n\n  .icon {\n    margin-right: 10px;\n  }\n\n  .playlist-img {\n    width: 40px;\n    height: 40px;\n    display: flex;\n    margin-right: 10px;\n    border-radius: 10px;\n  }\n\n  .playlist {\n    display: flex;\n    align-items: center;\n    margin-bottom: 20px;\n    transition: background-color 0.3s;\n    padding: 5px;\n    border-radius: 10px;\n    color: #fff;\n    text-decoration: none;\n\n    &:hover {\n      background-color: rgba(#fff, 0.05);\n    }\n  }\n\n  .playlist-list {\n    margin-top: 24px;\n    min-height: 100px;\n    flex: 1;\n    overflow: auto;\n  }\n\n  .playlist-name {\n    margin-bottom: 0;\n  }\n\n  .logo-conatiner {\n    display: flex;\n    gap: 16px;\n    margin: 24px 0 12px;\n  }\n}\n",
					"styleUrl": "./navbar.component.scss"
				}
			],
			"stylesData": "",
			"extends": [],
			"templateData": "<nav class=\"nav\" [ngClass]=\"{\n  'nav--open': open()\n}\">\n  <div class=\"logo-conatiner\">\n    <app-icon class=\"icon--large\" type=\"logo\"></app-icon>\n    <h1>SpotRx</h1>\n  </div>\n  @if(userData()){\n  <div class=\"user-data\">\n    <img alt=\"user avatar\" class=\"user-img\" [src]=\"userData().images[0].url\">\n    <span class=\"user-name\">{{userData().display_name}}</span>\n  </div>\n  }\n\n  <ul class=\"nav-links\">\n    <li><a class=\"link\" (click)=\"closeMenu()\" routerLink=\"/\" routerLinkActive=\"active\">\n        <mat-icon class=\"icon\">home</mat-icon> Home\n      </a></li>\n    <li><a class=\"link\" (click)=\"closeMenu()\" routerLink=\"/saved\" routerLinkActive=\"active\">\n        <mat-icon class=\"icon\">favorite</mat-icon> Saved\n      </a></li>\n    <li><a class=\"link\" (click)=\"closeMenu()\" routerLink=\"/top-tracks\" routerLinkActive=\"active\">\n        <mat-icon class=\"icon\">format_list_numbered</mat-icon> Top tracks\n      </a></li>\n    <li><a class=\"link\" (click)=\"closeMenu()\" routerLink=\"/search\" routerLinkActive=\"active\">\n        <mat-icon class=\"icon\">search</mat-icon> Search\n      </a></li>\n  </ul>\n\n  @if(userPlaylists.isSuccess()){\n  <div class=\"playlist-list\" *ngIf=\"userPlaylists.data().items as items\">\n    <a class=\"link\" (click)=\"closeMenu()\" [routerLink]=\"['/playlist', item.id]\" class=\"playlist\"\n      *ngFor=\"let item of items\">\n      <img [alt]=\"item.name\" class=\"playlist-img\" [src]=\"item.images[0].url\">\n      <h3 class=\"playlist-name\">{{item.name}}</h3>\n    </a>\n  </div>\n  }\n</nav>"
		},
		{
			"name": "PlayerComponent",
			"id": "component-PlayerComponent-aac9ccc63dc328e61a050f64f3c30868c30d048420a815134566ddc01dbdee87ab9ae158a12cda4b913a7a28265dbdcdfb3cc12319374b5de6d9cdd867044184",
			"file": "src/app/player/player.component.ts",
			"encapsulation": [],
			"entryComponents": [],
			"inputs": [],
			"outputs": [],
			"providers": [],
			"selector": "app-player",
			"styleUrls": ["./player.component.scss"],
			"styles": [],
			"templateUrl": ["./player.component.html"],
			"viewProviders": [],
			"hostDirectives": [],
			"inputsClass": [],
			"outputsClass": [],
			"propertiesClass": [
				{
					"name": "addToFav",
					"defaultValue": "injectMutation((client) => ({\n    mutationFn: (trackId: string) =>\n      firstValueFrom(this.trackService.saveTrack(trackId)),\n    onSuccess: () => {\n      this.snackBarService.open('Added to Liked Songs.');\n      client.invalidateQueries({ queryKey: ['isSavedTrack'] });\n    },\n  }))",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 58,
					"modifierKind": [123]
				},
				{
					"name": "deleteFromFav",
					"defaultValue": "injectMutation((client) => ({\n    mutationFn: (trackId: string) =>\n      firstValueFrom(this.trackService.deleteTrack(trackId)),\n    onSuccess: () => {\n      this.snackBarService.open('Removed form Liked Songs.');\n      client.invalidateQueries({ queryKey: ['isSavedTrack'] });\n    },\n  }))",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 66,
					"modifierKind": [123]
				},
				{
					"name": "isSavedTrack",
					"defaultValue": "computed(() => this.isSavedTrackQuery.data()?.[0])",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 57,
					"modifierKind": [125]
				},
				{
					"name": "isSavedTrackQuery",
					"defaultValue": "injectQuery(() => {\n    const trackId = this.trackId();\n    return this.trackService.checkUserSavedTracks(trackId ? [trackId] : []);\n  })",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 53,
					"modifierKind": [123]
				},
				{
					"name": "player",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Spotify.PlaybackState",
					"optional": true,
					"description": "",
					"line": 50,
					"modifierKind": [125]
				},
				{
					"name": "playerService",
					"defaultValue": "inject(PlayerService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 46,
					"modifierKind": [125]
				},
				{
					"name": "playerState$",
					"defaultValue": "this.playerService.getPlayerState()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 49,
					"modifierKind": [125]
				},
				{
					"name": "shuffle",
					"defaultValue": "injectMutation(() => ({\n    mutationFn: (state: boolean) =>\n      firstValueFrom(this.trackService.toggleShuffle(state)),\n  }))",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 74,
					"modifierKind": [123]
				},
				{
					"name": "snackBarService",
					"defaultValue": "inject(MatSnackBar)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 48,
					"modifierKind": [123]
				},
				{
					"name": "subscription",
					"defaultValue": "new Subscription()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 51,
					"modifierKind": [123]
				},
				{
					"name": "trackId",
					"defaultValue": "signal<string | null>(null)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 52,
					"modifierKind": [123]
				},
				{
					"name": "trackService",
					"defaultValue": "inject(TrackService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 47,
					"modifierKind": [123]
				}
			],
			"methodsClass": [
				{
					"name": "ngOnDestroy",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 118,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "ngOnInit",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 79,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "palyerStateChange$",
					"args": [],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 83,
					"deprecated": false,
					"deprecationMessage": "",
					"modifierKind": [123]
				},
				{
					"name": "setPosition",
					"args": [
						{
							"name": "positionSlider",
							"type": "MatSliderDragEvent",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 108,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "positionSlider",
							"type": "MatSliderDragEvent",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "setVolume",
					"args": [
						{
							"name": "volumeSlider",
							"type": "MatSliderDragEvent",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 104,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "volumeSlider",
							"type": "MatSliderDragEvent",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "toggleSavedTrack",
					"args": [],
					"optional": false,
					"returnType": "any",
					"typeParameters": [],
					"line": 97,
					"deprecated": false,
					"deprecationMessage": ""
				},
				{
					"name": "toggleShuffle",
					"args": [],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 112,
					"deprecated": false,
					"deprecationMessage": ""
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"hostBindings": [],
			"hostListeners": [],
			"standalone": true,
			"imports": [
				{
					"name": "MatSliderModule",
					"type": "module"
				},
				{
					"name": "MatIcon"
				},
				{
					"name": "IconComponent",
					"type": "component"
				},
				{
					"name": "CommonModule",
					"type": "module"
				},
				{
					"name": "HttpClientModule",
					"type": "module"
				},
				{
					"name": "ButtonDirective",
					"type": "directive"
				}
			],
			"description": "",
			"rawdescription": "\n",
			"type": "component",
			"sourceCode": "import { PlayerService } from '../shared/services/player.service';\nimport {\n  Component,\n  OnDestroy,\n  OnInit,\n  computed,\n  inject,\n  signal,\n} from '@angular/core';\nimport { MatSliderDragEvent, MatSliderModule } from '@angular/material/slider';\nimport {\n  Subscription,\n  distinctUntilChanged,\n  filter,\n  firstValueFrom,\n  map,\n  tap,\n} from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { TrackService } from '../shared/services/track.service';\nimport { MatIcon } from '@angular/material/icon';\nimport { IconComponent } from '../shared/icon/icon.component';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  injectMutation,\n  injectQuery,\n} from '@tanstack/angular-query-experimental';\nimport { ButtonDirective } from '../shared/button/button.directive';\n\n@Component({\n  selector: 'app-player',\n  templateUrl: './player.component.html',\n  styleUrls: ['./player.component.scss'],\n  standalone: true,\n  imports: [\n    MatSliderModule,\n    MatIcon,\n    IconComponent,\n    CommonModule,\n    HttpClientModule,\n    ButtonDirective,\n  ],\n})\nexport class PlayerComponent implements OnInit, OnDestroy {\n  public playerService = inject(PlayerService);\n  private trackService = inject(TrackService);\n  private snackBarService = inject(MatSnackBar);\n  public playerState$ = this.playerService.getPlayerState();\n  public player?: Spotify.PlaybackState;\n  private subscription = new Subscription();\n  private trackId = signal<string | null>(null);\n  private isSavedTrackQuery = injectQuery(() => {\n    const trackId = this.trackId();\n    return this.trackService.checkUserSavedTracks(trackId ? [trackId] : []);\n  });\n  public isSavedTrack = computed(() => this.isSavedTrackQuery.data()?.[0]);\n  private addToFav = injectMutation((client) => ({\n    mutationFn: (trackId: string) =>\n      firstValueFrom(this.trackService.saveTrack(trackId)),\n    onSuccess: () => {\n      this.snackBarService.open('Added to Liked Songs.');\n      client.invalidateQueries({ queryKey: ['isSavedTrack'] });\n    },\n  }));\n  private deleteFromFav = injectMutation((client) => ({\n    mutationFn: (trackId: string) =>\n      firstValueFrom(this.trackService.deleteTrack(trackId)),\n    onSuccess: () => {\n      this.snackBarService.open('Removed form Liked Songs.');\n      client.invalidateQueries({ queryKey: ['isSavedTrack'] });\n    },\n  }));\n  private shuffle = injectMutation(() => ({\n    mutationFn: (state: boolean) =>\n      firstValueFrom(this.trackService.toggleShuffle(state)),\n  }));\n\n  ngOnInit(): void {\n    this.subscription.add(this.palyerStateChange$().subscribe());\n  }\n\n  private palyerStateChange$() {\n    return this.playerState$.pipe(\n      tap((player) => {\n        this.player = player;\n      }),\n      map((player) => player.track_window.current_track.id),\n      distinctUntilChanged(),\n      filter((id) => !!id),\n      tap((id) => {\n        this.trackId.set(id);\n      })\n    );\n  }\n\n  toggleSavedTrack() {\n    const trackId = this.trackId();\n    if (!trackId) return;\n    if (this.isSavedTrack()) return this.deleteFromFav.mutate(trackId);\n    return this.addToFav.mutate(trackId);\n  }\n\n  setVolume(volumeSlider: MatSliderDragEvent) {\n    this.playerService.setVolume(volumeSlider.value);\n  }\n\n  setPosition(positionSlider: MatSliderDragEvent) {\n    this.playerService.setPosition(positionSlider.value);\n  }\n\n  toggleShuffle() {\n    if (!this.player) return;\n    this.player.shuffle = !this.player.shuffle;\n    this.shuffle.mutate(this.player.shuffle);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n",
			"assetsDirs": [],
			"styleUrlsData": [
				{
					"data": ".player {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n  height: 140px;\n  background-color: #2c2f31;\n  padding-left: 0;\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: 1fr;\n  padding-top: 16px;\n\n  @media screen and (min-width: 980px) {\n    grid-template-columns: 1fr 1fr 1fr;\n    padding-left: 220px;\n  }\n\n  .song-slider {\n    position: absolute;\n    top: -23px;\n    left: 0;\n    right: 0;\n\n    @media screen and (min-width: 980px) {\n      left: 212px;\n    }\n  }\n\n  .action-buttons {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-left: 0;\n    padding: 0 8px;\n\n    @media screen and (min-width: 980px) {\n      width: 100%;\n      max-width: 250px;\n    }\n  }\n\n  .action-buttons-container{\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .song-info {\n    display: flex;\n    align-items: center;\n    padding: 0 8px;\n\n    .album-image {\n      width: 60px;\n      height: 60px;\n      object-fit: cover;\n      border-radius: 5px;\n      display: block;\n      margin-right: 10px;\n\n      @media screen and (min-width: 980px) {\n        width: 80px;\n        height: 80px;\n      }\n    }\n\n    .name {\n      margin-bottom: 0;\n    }\n\n    .artist-container {\n      display: flex;\n      opacity: 0.6;\n      margin-top: 5px;\n    }\n\n    .artist {\n      margin-right: 5px;\n    }\n\n    .album-artist {\n      display: flex;\n      flex-direction: column;\n    }\n\n    .album-name {\n      opacity: 0.6;\n      font-size: 12px;\n\n      @media screen and (min-width: 980px) {\n        font-size: 16px;\n      }\n    }\n  }\n\n  .slider-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .volume-slider {\n    display: none;\n\n    @media screen and (min-width: 980px) {\n      display: block;\n      max-width: 150px;\n      width: 100%;\n    }\n  }\n}\n",
					"styleUrl": "./player.component.scss"
				}
			],
			"stylesData": "",
			"extends": [],
			"implements": ["OnInit", "OnDestroy"],
			"templateData": "@if(player) {\n<div class=\"player\">\n  <ng-container>\n    @if(playerService.playbackState | async; as position){\n    <mat-slider class=\"song-slider\" min=\"1\" [max]=\"player.duration\" step=\"10\">\n      <input (dragEnd)=\"setPosition($event)\" [value]=\"position\" matSliderThumb>\n    </mat-slider>\n    }\n    <div class=\"song-info\">\n      <img class=\"album-image\" [src]=\"player.track_window.current_track.album.images[0].url\">\n      <div class=\"album-artist\">\n        <h2 class=\"name\">{{player.track_window.current_track.name}}</h2>\n        <span class=\"album-name\">\n          {{player.track_window.current_track.album.name}}\n        </span>\n        <div class=\"artist-container\">\n          @for(item of player.track_window.current_track.artists; track item.name){\n          <span class=\"artist\">{{item.name}}</span>\n          }\n        </div>\n      </div>\n    </div>\n    <div class=\"action-buttons-container\">\n    <div class=\"action-buttons\">\n      <button appButton type=\"button\" aria-label=\"previous\" [mode]=\"'text'\" (click)=\"playerService.skipPrev()\">\n        <mat-icon>skip_previous</mat-icon>\n      </button>\n      <button appButton type=\"button\" aria-label=\"play\" [mode]=\"'text'\" (click)=\"playerService.tooglePlay()\">\n        @if(player.paused){\n        <mat-icon>play_circle_outline</mat-icon>\n        }\n        @else{\n        <mat-icon>pause_circle_outline</mat-icon>\n        }\n      </button>\n      <button appButton type=\"button\" aria-label=\"next\" [mode]=\"'text'\" (click)=\"playerService.skipNext();\">\n        <mat-icon>skip_next</mat-icon>\n      </button>\n    </div>\n  </div>\n    <div class=\"slider-container\">\n      <button appButton type=\"button\" [mode]=\"'text'\">\n        <app-icon [ngClass]=\"{'primary': player.shuffle }\" (click)=\"toggleShuffle()\" class=\"icon\"\n          type=\"shuffle\"></app-icon>\n      </button>\n      <button appButton type=\"button\" [mode]=\"'text'\" (click)=\"toggleSavedTrack()\">\n        <app-icon [ngClass]=\"{'primary': isSavedTrack() === true }\" class=\"icon\" type=\"heart\"></app-icon>\n      </button>\n      <mat-slider class=\"volume-slider\" min=\"0\" max=\"1\" step=\"0.1\">\n        <input (dragEnd)=\"setVolume($event)\" value=\"0.5\" matSliderThumb>\n      </mat-slider>\n    </div>\n  </ng-container>\n</div>\n}"
		},
		{
			"name": "PlaylistComponent",
			"id": "component-PlaylistComponent-0417e042dbd11b8226462e3dd571ff62ebe53af0778ceadba9decbad2ce547fcf9636dd00aaf5559bd2b85a3f176d47359e96233fedb0a2fa02dca85975de870",
			"file": "src/app/playlist/playlist.component.ts",
			"encapsulation": [],
			"entryComponents": [],
			"inputs": [],
			"outputs": [],
			"providers": [],
			"selector": "app-playlist",
			"styleUrls": ["./playlist.component.scss"],
			"styles": [],
			"templateUrl": ["./playlist.component.html"],
			"viewProviders": [],
			"hostDirectives": [],
			"inputsClass": [],
			"outputsClass": [],
			"propertiesClass": [
				{
					"name": "offset",
					"defaultValue": "signal(0)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 21
				},
				{
					"name": "playlistId",
					"defaultValue": "toSignal(\n    this.route.paramMap.pipe(\n      map((paramMap) => paramMap.get('id')),\n      distinctUntilChanged(),\n      tap(() => {\n        this.offset.set(0);\n      })\n    )\n  )",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 22
				},
				{
					"name": "playlistInfo",
					"defaultValue": "injectQuery(() =>\n    this.trackService.getPlaylistInfo(this.playlistId() ?? '')\n  )",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 34
				},
				{
					"name": "route",
					"defaultValue": "inject(ActivatedRoute)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 19,
					"modifierKind": [123]
				},
				{
					"name": "trackService",
					"defaultValue": "inject(TrackService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 20,
					"modifierKind": [123]
				},
				{
					"name": "tracksQuery",
					"defaultValue": "injectQuery(() =>\n    this.trackService.getPlaylistTracks(this.playlistId() ?? '', this.offset())\n  )",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 31
				}
			],
			"methodsClass": [
				{
					"name": "getNextPage",
					"args": [
						{
							"name": "page",
							"type": "PageEvent",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 38,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "page",
							"type": "PageEvent",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"hostBindings": [],
			"hostListeners": [],
			"standalone": true,
			"imports": [
				{
					"name": "TrackListComponent",
					"type": "component"
				},
				{
					"name": "NgxSkeletonLoaderModule",
					"type": "module"
				}
			],
			"description": "",
			"rawdescription": "\n",
			"type": "component",
			"sourceCode": "import { TrackService } from '../shared/services/track.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Component, inject, signal } from '@angular/core';\nimport { distinctUntilChanged, map, tap } from 'rxjs';\nimport { PageEvent } from '@angular/material/paginator';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { injectQuery } from '@tanstack/angular-query-experimental';\nimport { TrackListComponent } from '../shared/track-list/track-list.component';\nimport { NgxSkeletonLoaderModule } from 'ngx-skeleton-loader';\n\n@Component({\n  selector: 'app-playlist',\n  templateUrl: './playlist.component.html',\n  styleUrls: ['./playlist.component.scss'],\n  standalone: true,\n  imports: [TrackListComponent, NgxSkeletonLoaderModule],\n})\nexport class PlaylistComponent {\n  private route = inject(ActivatedRoute);\n  private trackService = inject(TrackService);\n  offset = signal(0);\n  playlistId = toSignal(\n    this.route.paramMap.pipe(\n      map((paramMap) => paramMap.get('id')),\n      distinctUntilChanged(),\n      tap(() => {\n        this.offset.set(0);\n      })\n    )\n  );\n  tracksQuery = injectQuery(() =>\n    this.trackService.getPlaylistTracks(this.playlistId() ?? '', this.offset())\n  );\n  playlistInfo = injectQuery(() =>\n    this.trackService.getPlaylistInfo(this.playlistId() ?? '')\n  );\n\n  getNextPage(page: PageEvent) {\n    this.offset.set(page.pageSize * page.pageIndex);\n  }\n}\n",
			"assetsDirs": [],
			"styleUrlsData": [
				{
					"data": ".playlist {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  max-height: 80vh;\n\n\n  .title {\n    margin-bottom: 32px;\n    text-align: center;\n  }\n}",
					"styleUrl": "./playlist.component.scss"
				}
			],
			"stylesData": "",
			"extends": [],
			"templateData": "<div class=\"playlist\">\n  @if(playlistInfo.isSuccess()){\n  <h1 class=\"title\">{{playlistInfo.data().name}}</h1>\n  }\n  @if(playlistInfo.isLoading()){\n  <div class=\"title\">\n    <ngx-skeleton-loader class=\"artist-skeleton\" animation=\"progress-dark\" count=\"1\"\n      [theme]=\"{ height: '32px', width: '200px', 'background-color': '#2c2f31' }\"></ngx-skeleton-loader>\n  </div>\n  }\n  <app-track-list class=\"track-list\" (getNextPage)=\"getNextPage($event)\" [total]=\"playlistInfo.data()?.tracks?.total\"\n    [tracksList]=\"tracksQuery.data()\" [isLoading]=\"tracksQuery.isLoading()\" >\n  </app-track-list>\n</div>"
		},
		{
			"name": "SavedTracksComponent",
			"id": "component-SavedTracksComponent-a925a75f41bea8a0f83984ad3360be8a747b81b5014aae26e5db6efb2af7b9290c2d01de96a72701525f31c061a4afa38919e03807b669d1703261e7987fe4f2",
			"file": "src/app/saved-tracks/saved-tracks.component.ts",
			"encapsulation": [],
			"entryComponents": [],
			"inputs": [],
			"outputs": [],
			"providers": [],
			"selector": "app-saved-tracks",
			"styleUrls": ["./saved-tracks.component.scss"],
			"styles": [],
			"templateUrl": ["./saved-tracks.component.html"],
			"viewProviders": [],
			"hostDirectives": [],
			"inputsClass": [],
			"outputsClass": [],
			"propertiesClass": [
				{
					"name": "offset",
					"defaultValue": "signal(0)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 17
				},
				{
					"name": "savedTracksQuery",
					"defaultValue": "injectQuery(() =>\n    this.trackService.getSavedTracks(this.offset())\n  )",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 18
				},
				{
					"name": "trackService",
					"defaultValue": "inject(TrackService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 16
				}
			],
			"methodsClass": [
				{
					"name": "getNextPage",
					"args": [
						{
							"name": "page",
							"type": "PageEvent",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 21,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "page",
							"type": "PageEvent",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"hostBindings": [],
			"hostListeners": [],
			"standalone": true,
			"imports": [
				{
					"name": "TrackListComponent",
					"type": "component"
				},
				{
					"name": "HttpClientModule",
					"type": "module"
				}
			],
			"description": "",
			"rawdescription": "\n",
			"type": "component",
			"sourceCode": "import { Component, inject, signal } from '@angular/core';\nimport { TrackService } from '../shared/services/track.service';\nimport { PageEvent } from '@angular/material/paginator';\nimport { injectQuery } from '@tanstack/angular-query-experimental';\nimport { TrackListComponent } from '../shared/track-list/track-list.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@Component({\n  selector: 'app-saved-tracks',\n  templateUrl: './saved-tracks.component.html',\n  styleUrls: ['./saved-tracks.component.scss'],\n  standalone: true,\n  imports: [TrackListComponent, HttpClientModule],\n})\nexport class SavedTracksComponent {\n  trackService = inject(TrackService);\n  offset = signal(0);\n  savedTracksQuery = injectQuery(() =>\n    this.trackService.getSavedTracks(this.offset())\n  );\n  getNextPage(page: PageEvent) {\n    this.offset.set(page.pageSize * page.pageIndex);\n  }\n}\n",
			"assetsDirs": [],
			"styleUrlsData": [
				{
					"data": ".saved {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  .title {\n    margin-bottom: 32px;\n    text-align: center;\n  }\n}",
					"styleUrl": "./saved-tracks.component.scss"
				}
			],
			"stylesData": "",
			"extends": [],
			"templateData": "<div class=\"saved\">\n  <h1 class=\"title\">Saved tracks 😎</h1>\n  <app-track-list class=\"track-list\" (getNextPage)=\"getNextPage($event)\" [total]=\"this.savedTracksQuery.data()?.total\"\n    [tracksList]=\"savedTracksQuery.data()\" [isLoading]=\"savedTracksQuery.isLoading()\">\n  </app-track-list>\n</div>"
		},
		{
			"name": "SearchTracksComponent",
			"id": "component-SearchTracksComponent-7fa71bf8bca5085a015af28267dbb8cbbe1e5425b95c75e29337bcbff614c117b5bec372efbf44295bca7aad098d1e9a361d9f72f2f78500db73335bfab5790b",
			"file": "src/app/search-tracks/search-tracks.component.ts",
			"encapsulation": [],
			"entryComponents": [],
			"inputs": [],
			"outputs": [],
			"providers": [],
			"selector": "app-search-tracks",
			"styleUrls": ["./search-tracks.component.scss"],
			"styles": [],
			"templateUrl": ["./search-tracks.component.html"],
			"viewProviders": [],
			"hostDirectives": [],
			"inputsClass": [],
			"outputsClass": [],
			"propertiesClass": [
				{
					"name": "playerService",
					"defaultValue": "inject(PlayerService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 32,
					"modifierKind": [123]
				},
				{
					"name": "search",
					"defaultValue": "toSignal(\n    this.searchFromControl.valueChanges.pipe(\n      debounceTime(300),\n      filter((searchValue) => !!searchValue?.length),\n      distinctUntilChanged(),\n      takeUntilDestroyed(),\n    ),\n  )",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 34
				},
				{
					"name": "searchFromControl",
					"defaultValue": "new FormControl('')",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 33,
					"modifierKind": [125]
				},
				{
					"name": "searchQuery",
					"defaultValue": "injectQuery(() =>\n    this.trackService.getSearchResults(this.search() ?? ''),\n  )",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 42
				},
				{
					"name": "skeletonLoadingArray",
					"defaultValue": "Array.from({ length: 6 }, () => null)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 45,
					"modifierKind": [148]
				},
				{
					"name": "trackService",
					"defaultValue": "inject(TrackService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 31,
					"modifierKind": [125]
				}
			],
			"methodsClass": [
				{
					"name": "play",
					"args": [
						{
							"name": "uri",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 47,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "uri",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"hostBindings": [],
			"hostListeners": [],
			"standalone": true,
			"imports": [
				{
					"name": "MatFormFieldModule",
					"type": "module"
				},
				{
					"name": "MatInputModule",
					"type": "module"
				},
				{
					"name": "NgOptimizedImage"
				},
				{
					"name": "DurationPipe",
					"type": "pipe"
				},
				{
					"name": "NgxSkeletonLoaderModule",
					"type": "module"
				},
				{
					"name": "ReactiveFormsModule",
					"type": "module"
				},
				{
					"name": "TrackComponent",
					"type": "component"
				}
			],
			"description": "",
			"rawdescription": "\n",
			"type": "component",
			"sourceCode": "import { debounceTime, distinctUntilChanged, filter } from 'rxjs';\nimport { Component, inject } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { TrackService } from '../shared/services/track.service';\nimport { PlayerService } from '../shared/services/player.service';\nimport { takeUntilDestroyed, toSignal } from '@angular/core/rxjs-interop';\nimport { injectQuery } from '@tanstack/angular-query-experimental';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { NgOptimizedImage } from '@angular/common';\nimport { DurationPipe } from '../shared/duration/duration.pipe';\nimport { NgxSkeletonLoaderModule } from 'ngx-skeleton-loader';\nimport { TrackComponent } from '../shared/track/track.component';\n\n@Component({\n  selector: 'app-search-tracks',\n  templateUrl: './search-tracks.component.html',\n  styleUrls: ['./search-tracks.component.scss'],\n  standalone: true,\n  imports: [\n    MatFormFieldModule,\n    MatInputModule,\n    NgOptimizedImage,\n    DurationPipe,\n    NgxSkeletonLoaderModule,\n    ReactiveFormsModule,\n    TrackComponent,\n  ],\n})\nexport class SearchTracksComponent {\n  public trackService = inject(TrackService);\n  private playerService = inject(PlayerService);\n  public searchFromControl = new FormControl('');\n  search = toSignal(\n    this.searchFromControl.valueChanges.pipe(\n      debounceTime(300),\n      filter((searchValue) => !!searchValue?.length),\n      distinctUntilChanged(),\n      takeUntilDestroyed(),\n    ),\n  );\n  searchQuery = injectQuery(() =>\n    this.trackService.getSearchResults(this.search() ?? ''),\n  );\n  readonly skeletonLoadingArray = Array.from({ length: 6 }, () => null);\n\n  play(uri: string) {\n    this.playerService.playSong([uri], 0);\n  }\n}\n",
			"assetsDirs": [],
			"styleUrlsData": [
				{
					"data": ".search {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    .track-list {\n        display: flex;\n        justify-content: center;\n        flex-direction: column;\n        gap: 24px;\n        margin: auto;\n        width: 80%; \n    }\n}\n\n.search-input-field {\n    & input {\n        color: #fff;\n    }\n}",
					"styleUrl": "./search-tracks.component.scss"
				}
			],
			"stylesData": "",
			"extends": [],
			"templateData": "<div class=\"search\">\n  <mat-form-field class=\"search-input-field\" appearance=\"fill\">\n    <input aria-label=\"search\" type=\"text\" matInput [formControl]=\"searchFromControl\" placeholder=\"Search for specific song...\">\n  </mat-form-field>\n  @if(searchQuery.isSuccess()){\n  <div class=\"track-list\">\n    @for(item of searchQuery.data().tracks.items; track item.id;){\n   <app-track [track]=\"item\" (click)=\"play(item.uri)\"></app-track>\n    }\n  </div>\n  }\n  @if(searchQuery.isLoading()){\n  <div class=\"track-list track-list--skeleton\">\n    @for(item of skeletonLoadingArray; track item){\n      <app-track [isLoading]=\"true\"></app-track>\n    }\n  </div>\n  }\n</div>"
		},
		{
			"name": "TopTracksComponent",
			"id": "component-TopTracksComponent-9a4b4df3e489b086a437d6611b87e9aca664a1c6cf495af621bc74179e26e0594aa9b57d7a64fce60ed31c2db93961b89a803af1184b3661805ff706dcdbc6a2",
			"file": "src/app/top-tracks/top-tracks.component.ts",
			"encapsulation": [],
			"entryComponents": [],
			"inputs": [],
			"outputs": [],
			"providers": [],
			"selector": "app-top-tracks",
			"styleUrls": ["./top-tracks.component.scss"],
			"styles": [],
			"templateUrl": ["./top-tracks.component.html"],
			"viewProviders": [],
			"hostDirectives": [],
			"inputsClass": [],
			"outputsClass": [],
			"propertiesClass": [
				{
					"name": "offset",
					"defaultValue": "signal(0)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 18
				},
				{
					"name": "topTracks",
					"defaultValue": "computed(() => {\n    const topTracksResponse = this.topTracksQuery.data();\n    if (!topTracksResponse) return;\n    const mappedTracks: Item[] =\n      topTracksResponse?.items.map((item) => ({\n        track: item,\n      })) ?? [];\n    const mappedResponse: TracksResponse = {\n      ...topTracksResponse,\n      items: mappedTracks,\n    };\n    return mappedResponse;\n  })",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 22
				},
				{
					"name": "topTracksQuery",
					"defaultValue": "injectQuery(() =>\n    this.trackService.getTopTracks(this.offset())\n  )",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 19
				},
				{
					"name": "trackService",
					"defaultValue": "inject(TrackService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 17
				}
			],
			"methodsClass": [
				{
					"name": "getNextPage",
					"args": [
						{
							"name": "page",
							"type": "PageEvent",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 35,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "page",
							"type": "PageEvent",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"hostBindings": [],
			"hostListeners": [],
			"standalone": true,
			"imports": [
				{
					"name": "TrackListComponent",
					"type": "component"
				},
				{
					"name": "HttpClientModule",
					"type": "module"
				}
			],
			"description": "",
			"rawdescription": "\n",
			"type": "component",
			"sourceCode": "import { Component, computed, inject, signal } from '@angular/core';\nimport { TrackListComponent } from '../shared/track-list/track-list.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { injectQuery } from '@tanstack/angular-query-experimental';\nimport { TrackService } from '../shared/services/track.service';\nimport { PageEvent } from '@angular/material/paginator';\nimport { Item, TracksResponse } from '../shared/interfaces/track';\n\n@Component({\n  selector: 'app-top-tracks',\n  templateUrl: './top-tracks.component.html',\n  styleUrls: ['./top-tracks.component.scss'],\n  standalone: true,\n  imports: [TrackListComponent, HttpClientModule],\n})\nexport class TopTracksComponent {\n  trackService = inject(TrackService);\n  offset = signal(0);\n  topTracksQuery = injectQuery(() =>\n    this.trackService.getTopTracks(this.offset())\n  );\n  topTracks = computed(() => {\n    const topTracksResponse = this.topTracksQuery.data();\n    if (!topTracksResponse) return;\n    const mappedTracks: Item[] =\n      topTracksResponse?.items.map((item) => ({\n        track: item,\n      })) ?? [];\n    const mappedResponse: TracksResponse = {\n      ...topTracksResponse,\n      items: mappedTracks,\n    };\n    return mappedResponse;\n  });\n  getNextPage(page: PageEvent) {\n    this.offset.set(page.pageSize * page.pageIndex);\n  }\n}\n",
			"assetsDirs": [],
			"styleUrlsData": [
				{
					"data": ".top-tracks {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  \n    .title {\n      margin-bottom: 32px;\n      text-align: center;\n    }\n  }",
					"styleUrl": "./top-tracks.component.scss"
				}
			],
			"stylesData": "",
			"extends": [],
			"templateData": "<div class=\"top-tracks\">\n    <h1 class=\"title\">Top tracks 😎</h1>\n    <app-track-list class=\"track-list\" (getNextPage)=\"getNextPage($event)\" [total]=\"this.topTracksQuery.data()?.total\"\n      [tracksList]=\"topTracks()\" [isLoading]=\"topTracksQuery.isLoading()\">\n    </app-track-list>\n  </div>"
		},
		{
			"name": "TrackComponent",
			"id": "component-TrackComponent-5ef706f78b46d7c6dbe4fc3151fb0bc5c566987b001a70212d92c5ac6a1a3ae2dcdd44b6a3522d4d1432bc68c3c8ea342e165ca0e95cab15e21ebf994825010b",
			"file": "src/app/shared/track/track.component.ts",
			"encapsulation": [],
			"entryComponents": [],
			"inputs": [],
			"outputs": [],
			"providers": [],
			"selector": "app-track",
			"styleUrls": [],
			"styles": [],
			"templateUrl": ["./track.component.html"],
			"viewProviders": [],
			"hostDirectives": [],
			"inputsClass": [],
			"outputsClass": [],
			"propertiesClass": [
				{
					"name": "isLoading",
					"defaultValue": "input<Boolean>(false)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 23
				},
				{
					"name": "track",
					"defaultValue": "input<Track>()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 22
				}
			],
			"methodsClass": [],
			"deprecated": false,
			"deprecationMessage": "",
			"hostBindings": [],
			"hostListeners": [],
			"standalone": true,
			"imports": [
				{
					"name": "CommonModule",
					"type": "module"
				},
				{
					"name": "DurationPipe",
					"type": "pipe"
				},
				{
					"name": "NgOptimizedImage"
				},
				{
					"name": "NgxSkeletonLoaderModule",
					"type": "module"
				},
				{
					"name": "ButtonDirective",
					"type": "directive"
				}
			],
			"description": "",
			"rawdescription": "\n",
			"type": "component",
			"sourceCode": "import { CommonModule, NgOptimizedImage } from '@angular/common';\nimport { Component, input } from '@angular/core';\nimport { Track } from '../interfaces/track';\nimport { DurationPipe } from '../duration/duration.pipe';\nimport { NgxSkeletonLoaderModule } from 'ngx-skeleton-loader';\nimport { ButtonDirective } from '../button/button.directive';\n\n@Component({\n  selector: 'app-track',\n  standalone: true,\n  imports: [\n    CommonModule,\n    DurationPipe,\n    NgOptimizedImage,\n    NgxSkeletonLoaderModule,\n    ButtonDirective,\n  ],\n  templateUrl: './track.component.html',\n  styleUrl: './track.component.scss',\n})\nexport class TrackComponent {\n  track = input<Track>();\n  isLoading = input<Boolean>(false);\n}\n",
			"styleUrl": "./track.component.scss",
			"assetsDirs": [],
			"styleUrlsData": "",
			"stylesData": "",
			"extends": [],
			"templateData": "<div appButton class=\"track\">\n@if(!isLoading()){\n    <div class=\"song-info\">\n      <img [alt]=\"track()?.name\" class=\"track-img\" width=\"90\" height=\"90\" [ngSrc]=\"track()?.album?.images?.[1]?.url ?? ''\">\n      <div class=\"album-artist\">\n        <h2 class=\"name\">{{track()?.name}}</h2>\n        <span class=\"album-name\">\n          {{track()?.album?.name}}\n        </span>\n        <div class=\"track-artist\">\n          @for(artist of track()?.artists; track artist.id){\n          <span class=\"artist\">{{artist.name}}</span>\n          }\n        </div>\n      </div>\n    </div>\n    <span class=\"time\">{{track()?.duration_ms ?? 0 | duration}}\n    </span>\n}\n@if(isLoading()){\n    <div class=\"song-info\">\n      <ngx-skeleton-loader animation=\"progress-dark\" count=\"1\"\n        [theme]=\"{ height: '90px', width: '90px', 'background-color': '#2c2f31' }\"></ngx-skeleton-loader>\n      <div class=\"album-artist\">\n        <ngx-skeleton-loader animation=\"progress-dark\" count=\"1\"\n          [theme]=\"{ height: '32px', width: '160px', 'background-color': '#2c2f31' }\"></ngx-skeleton-loader>\n        <ngx-skeleton-loader class=\"artist-skeleton\" animation=\"progress-dark\" count=\"2\"\n          [theme]=\"{ height: '16px', width: '150px', 'background-color': '#2c2f31' }\"></ngx-skeleton-loader>\n      </div>\n    </div>\n    <span class=\"time\">\n      <ngx-skeleton-loader animation=\"progress-dark\" count=\"1\"\n        [theme]=\"{ height: '16px', width: '30px', 'background-color': '#2c2f31' }\"></ngx-skeleton-loader>\n    </span>\n}\n</div>"
		},
		{
			"name": "TrackListComponent",
			"id": "component-TrackListComponent-edc73549817d350c84b44a5b3a669ef871006a6ab4feb139837b5ed9ce0482d93e8bc26673e307d80e1e69f4f1f95d9ddb5cee497d5863ead6b180ad179b5905",
			"file": "src/app/shared/track-list/track-list.component.ts",
			"encapsulation": [],
			"entryComponents": [],
			"inputs": [],
			"outputs": [],
			"providers": [],
			"selector": "app-track-list",
			"styleUrls": ["./track-list.component.scss"],
			"styles": [],
			"templateUrl": ["./track-list.component.html"],
			"viewProviders": [],
			"hostDirectives": [],
			"inputsClass": [],
			"outputsClass": [
				{
					"name": "getNextPage",
					"defaultValue": "new EventEmitter<PageEvent>()",
					"deprecated": false,
					"deprecationMessage": "",
					"line": 37,
					"type": "EventEmitter"
				}
			],
			"propertiesClass": [
				{
					"name": "currentPage",
					"defaultValue": "computed(() => {\n    const offset = this.tracksList()?.offset;\n    if (!offset) return;\n    return offset / this.pageSize;\n  })",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 40
				},
				{
					"name": "isLoading",
					"defaultValue": "input.required<boolean>()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 35
				},
				{
					"name": "pageSize",
					"defaultValue": "this.trackService.pageSize",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 38
				},
				{
					"name": "playerService",
					"defaultValue": "inject(PlayerService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 32,
					"modifierKind": [123]
				},
				{
					"name": "skeletonLoadingArray",
					"defaultValue": "Array.from({ length: 6 }, () => null)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 39,
					"modifierKind": [148]
				},
				{
					"name": "total",
					"defaultValue": "input.required()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 36
				},
				{
					"name": "trackService",
					"defaultValue": "inject(TrackService)",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 33,
					"modifierKind": [123]
				},
				{
					"name": "tracksList",
					"defaultValue": "input.required<TracksResponse | undefined>()",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"optional": false,
					"description": "",
					"line": 34
				}
			],
			"methodsClass": [
				{
					"name": "handlePageEvent",
					"args": [
						{
							"name": "page",
							"type": "PageEvent",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 51,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "page",
							"type": "PageEvent",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "play",
					"args": [
						{
							"name": "index",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"optional": false,
					"returnType": "void",
					"typeParameters": [],
					"line": 46,
					"deprecated": false,
					"deprecationMessage": "",
					"jsdoctags": [
						{
							"name": "index",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			],
			"deprecated": false,
			"deprecationMessage": "",
			"hostBindings": [],
			"hostListeners": [],
			"standalone": true,
			"imports": [
				{
					"name": "MatPaginatorModule",
					"type": "module"
				},
				{
					"name": "NgOptimizedImage"
				},
				{
					"name": "NgxSkeletonLoaderModule",
					"type": "module"
				},
				{
					"name": "DurationPipe",
					"type": "pipe"
				},
				{
					"name": "TrackComponent",
					"type": "component"
				}
			],
			"description": "",
			"rawdescription": "\n",
			"type": "component",
			"sourceCode": "import { TrackService } from '../services/track.service';\nimport { PlayerService } from '../services/player.service';\nimport { TracksResponse } from '../interfaces/track';\nimport {\n  Component,\n  EventEmitter,\n  Output,\n  computed,\n  inject,\n  input,\n} from '@angular/core';\nimport { MatPaginatorModule, PageEvent } from '@angular/material/paginator';\nimport { NgOptimizedImage } from '@angular/common';\nimport { NgxSkeletonLoaderModule } from 'ngx-skeleton-loader';\nimport { DurationPipe } from '../duration/duration.pipe';\nimport { TrackComponent } from '../track/track.component';\n\n@Component({\n  selector: 'app-track-list',\n  templateUrl: './track-list.component.html',\n  styleUrls: ['./track-list.component.scss'],\n  standalone: true,\n  imports: [\n    MatPaginatorModule,\n    NgOptimizedImage,\n    NgxSkeletonLoaderModule,\n    DurationPipe,\n    TrackComponent,\n  ],\n})\nexport class TrackListComponent {\n  private playerService = inject(PlayerService);\n  private trackService = inject(TrackService);\n  tracksList = input.required<TracksResponse | undefined>();\n  isLoading = input.required<boolean>();\n  total = input.required();\n  @Output() getNextPage = new EventEmitter<PageEvent>();\n  pageSize = this.trackService.pageSize;\n  readonly skeletonLoadingArray = Array.from({ length: 6 }, () => null);\n  currentPage = computed(() => {\n    const offset = this.tracksList()?.offset;\n    if (!offset) return;\n    return offset / this.pageSize;\n  });\n\n  play(index: number) {\n    const queue = this.tracksList()?.items.map((item) => item.track.uri);\n    if (queue) this.playerService.queue.next({ queue, index });\n  }\n\n  handlePageEvent(page: PageEvent) {\n    this.getNextPage.emit(page);\n  }\n}\n",
			"assetsDirs": [],
			"styleUrlsData": [
				{
					"data": ".track-list-container {\n  display: flex;\n  flex-direction: column;\n  max-height: 65vh;\n}\n\n.track-list {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  gap: 24px;\n  margin: auto;\n  width: 100%;\n  padding: 0;\n\n  @media screen and (min-width: 980px) {\n    width: 80%;\n  }\n}\n\n.paginator {\n  margin-bottom: 16px;\n}\n\n.mat-paginator {\n  margin: auto;\n  width: 80%;\n  background-color: #35393C;\n  color: #fff;\n}",
					"styleUrl": "./track-list.component.scss"
				}
			],
			"stylesData": "",
			"extends": [],
			"templateData": "<div class=\"track-list-container\">\n  <mat-paginator class=\"paginator\" (page)=\"handlePageEvent($event)\" [length]=\"total()\" [pageSize]=\"pageSize\"\n    [pageIndex]=\"currentPage()\" aria-label=\"Select page\">\n  </mat-paginator>\n  @if(!isLoading() && tracksList()){\n  <div class=\"track-list\">\n    @for(item of tracksList()?.items; track item.track.id; let i = $index){\n    <app-track [track]=\"item.track\" (click)=\"play(i)\"></app-track>\n    }\n  </div>\n  }\n  @if(isLoading()){\n  <div class=\"track-list track-list--skeleton\">\n    @for(item of skeletonLoadingArray; track item; let i = $index){\n    <app-track [isLoading]=\"true\"></app-track>\n    }\n  </div>\n  }\n</div>"
		}
	],
	"modules": [],
	"miscellaneous": {
		"variables": [
			{
				"name": "appConfig",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/app/app-config.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "ApplicationConfig",
				"defaultValue": "{\n  providers: [\n    importProvidersFrom([HttpClientModule, BrowserAnimationsModule]),\n    provideRouter(routes),\n    provideAngularQuery(\n      new QueryClient({\n        defaultOptions: { queries: { placeholderData: keepPreviousData } },\n      })\n    ),\n    {\n      provide: HTTP_INTERCEPTORS,\n      useFactory: () => {\n        return new AuthInterceptor();\n      },\n      multi: true,\n      deps: [AuthService],\n    },\n    { provide: MAT_SNACK_BAR_DEFAULT_OPTIONS, useValue: { duration: 2500 } },\n    PlayerService,\n  ],\n}"
			},
			{
				"name": "BASE_URL",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/app/utils/config.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "string",
				"defaultValue": "'https://api.spotify.com/v1/'"
			},
			{
				"name": "CLIENT_ID",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/app/utils/config.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "string",
				"defaultValue": "'57a795ef5d9a4ccca747877d47fbc61d'"
			},
			{
				"name": "environment",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/environments/environment.prod.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "object",
				"defaultValue": "{\n  production: true,\n  redirectUri: 'https://magda98.github.io/SpotRx/'\n}"
			},
			{
				"name": "environment",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/environments/environment.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "object",
				"defaultValue": "{\n  production: false,\n  redirectUri: 'http://localhost:4200/',\n}"
			},
			{
				"name": "featuredPlaylists",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/tests/mocks.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "FeaturedPlaylistResponse",
				"defaultValue": "{\n  message: 'Popular Playlists',\n  playlists: {\n    items: [\n      {\n        description:\n          'Największe rapowe kawałki w tej chwili. Cover: Otsochodzi',\n        href: 'https://api.spotify.com/v1/playlists/37i9dQZF1DWXJnyndhASBe',\n        id: '37i9dQZF1DWXJnyndhASBe',\n        images: [\n          {\n            height: null,\n            url: 'https://i.scdn.co/image/ab67706f000000022853dbf3a386ff35d0e95867',\n            width: null,\n          },\n        ],\n        name: 'RAP GENERACJA',\n        primary_color: '#ffffff',\n        type: 'playlist',\n        uri: 'spotify:playlist:37i9dQZF1DWXJnyndhASBe',\n      },\n      {\n        description: '50 najgorętszych hitów w Polsce. Cover: Kizo, Bletka',\n        href: 'https://api.spotify.com/v1/playlists/37i9dQZF1DX49bSMRljsho',\n        id: '37i9dQZF1DX49bSMRljsho',\n        images: [\n          {\n            height: null,\n            url: 'https://i.scdn.co/image/ab67706f00000002419aba98b988e66b49397503',\n            width: null,\n          },\n        ],\n        name: 'Hot Hits Polska',\n        primary_color: '#ffffff',\n        type: 'playlist',\n        uri: 'spotify:playlist:37i9dQZF1DX49bSMRljsho',\n      },\n      {\n        description: '🤰🏻🤰🏻🤰🏻🤰🏻🤰🏻 cover: Fagata',\n        href: 'https://api.spotify.com/v1/playlists/37i9dQZF1DX35mEXECRn6o',\n        id: '37i9dQZF1DX35mEXECRn6o',\n        images: [\n          {\n            height: null,\n            url: 'https://i.scdn.co/image/ab67706f0000000256022bab9d8032623325602c',\n            width: null,\n          },\n        ],\n        name: 'viral rap',\n        primary_color: '#3ffc04',\n        type: 'playlist',\n        uri: 'spotify:playlist:37i9dQZF1DX35mEXECRn6o',\n      },\n      {\n        description: 'Playlista pełna radiowych przebojów ostatnich miesięcy.',\n        href: 'https://api.spotify.com/v1/playlists/37i9dQZF1DX99QlO9EobD7',\n        id: '37i9dQZF1DX99QlO9EobD7',\n        images: [\n          {\n            height: null,\n            url: 'https://i.scdn.co/image/ab67706f000000028b3b83b2962b242445ad0ea0',\n            width: null,\n          },\n        ],\n        name: 'Hity z radia 2024',\n        primary_color: '#ffffff',\n        type: 'playlist',\n        uri: 'spotify:playlist:37i9dQZF1DX99QlO9EobD7',\n      },\n    ],\n    limit: 12,\n    offset: 0,\n    total: 100,\n  },\n}"
			},
			{
				"name": "HEADER_CONFIG",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/app/utils/config.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "object",
				"defaultValue": "{\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  },\n}"
			},
			{
				"name": "Icon",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/stories/button.stories.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "Story",
				"defaultValue": "{\n  args: {\n    mode: 'text'\n  },\n  render: ({mode}) => {\n    console.log(\"🚀 ~ mode:\", mode)\n    return {\n      template: `<button type=\"button\" mode=\"${mode}\" appButton> <app-icon class=\"icon\" type=\"menu\"></app-icon></button>`,\n    };\n  },\n}"
			},
			{
				"name": "icons",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/app/utils/icons.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "",
				"defaultValue": "{\n  logo: '<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 66 66\"><path fill=\"#fff\" d=\"M33 0C14.775 0 0 14.775 0 33c0 18.226 14.775 33 33 33 18.227 0 33-14.774 33-33C66 14.776 51.227.002 33 .002V0Zm15.133 47.596a2.056 2.056 0 0 1-2.83.682c-7.747-4.733-17.5-5.805-28.988-3.18a2.058 2.058 0 0 1-.915-4.012c12.57-2.873 23.353-1.636 32.052 3.68.969.595 1.276 1.86.681 2.83Zm4.04-8.987a2.572 2.572 0 0 1-3.54.85c-8.87-5.454-22.39-7.033-32.883-3.849a2.576 2.576 0 0 1-3.21-1.714 2.577 2.577 0 0 1 1.715-3.209c11.985-3.636 26.884-1.875 37.07 4.385a2.572 2.572 0 0 1 .847 3.537Zm.346-9.357c-10.636-6.317-28.183-6.898-38.338-3.816a3.086 3.086 0 1 1-1.791-5.907c11.656-3.539 31.034-2.855 43.28 4.414a3.083 3.083 0 0 1 1.079 4.23 3.084 3.084 0 0 1-4.228 1.08h-.002Z\"/></svg>',\n  menu: '<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"currentColor\" color=\"currentColor\"><path d=\"M4 18h16M4 12h16M4 6h16\" stroke=\"#fff\" stroke-width=\"2\" stroke-linecap=\"round\" /></svg>',\n  heart:\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 20 20\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M3.172 5.172a4 4 0 0 1 5.656 0L10 6.343l1.172-1.171a4 4 0 1 1 5.656 5.656L10 17.657l-6.828-6.829a4 4 0 0 1 0-5.656Z\" clip-rule=\"evenodd\" /></svg>',\n  heartOutline:\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4.318 6.318a4.5 4.5 0 0 0 0 6.364L12 20.364l7.682-7.682a4.5 4.5 0 0 0-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 0 0-6.364 0Z\" /></svg>',\n  shuffle:\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M14 20v-2h2.6l-3.2-3.2l1.425-1.425L18 16.55V14h2v6h-6Zm-8.6 0L4 18.6L16.6 6H14V4h6v6h-2V7.4L5.4 20Zm3.775-9.425L4 5.4L5.4 4l5.175 5.175l-1.4 1.4Z\" /></svg>',\n} as const"
			},
			{
				"name": "meta",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/stories/button.stories.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "Meta<ButtonDirective>",
				"defaultValue": "{\n  title: 'Example/Button',\n  tags: ['autodocs'],\n  argTypes: {\n    mode: {\n      description: 'Mode of button',\n      options: ['opacity', 'text'],\n      control: { type: 'select' },\n    },\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, ButtonDirective, IconComponent],\n    }),\n  ],\n}"
			},
			{
				"name": "meta",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/stories/track.stories.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "Meta<TrackComponent>",
				"defaultValue": "{\n  title: 'Example/Track',\n  component: TrackComponent,\n  tags: ['autodocs'],\n  argTypes: {},\n  render: (args) => ({\n    props: {\n      ...args,\n    },\n    template: `<app-track ${argsToTemplate(args)}></app-track>`,\n  }),\n}"
			},
			{
				"name": "Opacity",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/stories/button.stories.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "Story",
				"defaultValue": "{\n  render: () => {\n    return {\n      template: `<button type=\"button\" [mode]=\"'opacity'\" appButton>button</button>`,\n    };\n  },\n}"
			},
			{
				"name": "playlist",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/tests/mocks.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "Playlist",
				"defaultValue": "{\n  id: '50Gsv3p7qLLPVzfPBu8UcO',\n  href: 'https://api.spotify.com/v1/playlists/50Gsv3p7qLLPVzfPBu8UcO?locale=en-US%2Cen%3Bq%3D0.9%2Cpl-PL%3Bq%3D0.8%2Cpl%3Bq%3D0.7',\n  images: [\n    {\n      height: 640,\n      url: 'https://mosaic.scdn.co/640/ab67616d00001e02372cd9cefda2a6d3d11428fcab67616d00001e024246e3158421f5abb75abc4fab67616d00001e025ebcbbc6940d285ccd96e963ab67616d00001e02d1410c1372fab1e516328fa8',\n      width: 640,\n    },\n    {\n      height: 300,\n      url: 'https://mosaic.scdn.co/300/ab67616d00001e02372cd9cefda2a6d3d11428fcab67616d00001e024246e3158421f5abb75abc4fab67616d00001e025ebcbbc6940d285ccd96e963ab67616d00001e02d1410c1372fab1e516328fa8',\n      width: 300,\n    },\n    {\n      height: 60,\n      url: 'https://mosaic.scdn.co/60/ab67616d00001e02372cd9cefda2a6d3d11428fcab67616d00001e024246e3158421f5abb75abc4fab67616d00001e025ebcbbc6940d285ccd96e963ab67616d00001e02d1410c1372fab1e516328fa8',\n      width: 60,\n    },\n  ],\n  name: 'Dua Lipa 🍑💫🔥',\n  tracks: {\n    href: 'https://api.spotify.com/v1/playlists/50Gsv3p7qLLPVzfPBu8UcO/tracks?offset=0&limit=100&locale=en-US%2Cen%3Bq%3D0.9%2Cpl-PL%3Bq%3D0.8%2Cpl%3Bq%3D0.7',\n    items: [\n      {\n        added_at: '2021-11-25T07:44:16Z',\n        track: {\n          album: {\n            id: '01sfgrNbnnPUEyz6GZYlt9',\n            images: [\n              {\n                url: 'https://i.scdn.co/image/ab67616d0000b273d1410c1372fab1e516328fa8',\n                width: 640,\n                height: 640,\n              },\n              {\n                url: 'https://i.scdn.co/image/ab67616d00001e02d1410c1372fab1e516328fa8',\n                width: 300,\n                height: 300,\n              },\n              {\n                url: 'https://i.scdn.co/image/ab67616d00004851d1410c1372fab1e516328fa8',\n                width: 64,\n                height: 64,\n              },\n            ],\n            name: 'Everyday Is Christmas (Deluxe Edition)',\n          },\n          artists: [\n            {\n              id: '5WUlDfRSoLAfcVSX1WnrxN',\n              name: 'Sia',\n              uri: 'spotify:artist:5WUlDfRSoLAfcVSX1WnrxN',\n            },\n          ],\n          duration_ms: 206539,\n\n          id: '1N1ZpYUJc9fwrqk53FGgWv',\n          name: \"Santa's Coming for Us\",\n          uri: 'spotify:track:1N1ZpYUJc9fwrqk53FGgWv',\n        },\n      },\n    ],\n    limit: 100,\n    offset: 0,\n    total: 1,\n    next: '',\n    previous: '',\n  },\n  type: 'playlist',\n  uri: 'spotify:playlist:50Gsv3p7qLLPVzfPBu8UcO',\n}"
			},
			{
				"name": "playlistsResponse",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/tests/mocks.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "PlaylistResponse",
				"defaultValue": "{\n  total: 2,\n  limit: 12,\n  offset: 0,\n  items: [\n    {\n      href: 'https://api.spotify.com/v1/playlists/50Gsv3p7qLLPVzfPBu8UcO',\n      id: '50Gsv3p7qLLPVzfPBu8UcO',\n      images: [\n        {\n          height: 640,\n          url: 'https://mosaic.scdn.co/640/ab67616d0000b273372cd9cefda2a6d3d11428fcab67616d0000b2734246e3158421f5abb75abc4fab67616d0000b2735ebcbbc6940d285ccd96e963ab67616d0000b273d1410c1372fab1e516328fa8',\n          width: 640,\n        },\n        {\n          height: 300,\n          url: 'https://mosaic.scdn.co/300/ab67616d0000b273372cd9cefda2a6d3d11428fcab67616d0000b2734246e3158421f5abb75abc4fab67616d0000b2735ebcbbc6940d285ccd96e963ab67616d0000b273d1410c1372fab1e516328fa8',\n          width: 300,\n        },\n        {\n          height: 60,\n          url: 'https://mosaic.scdn.co/60/ab67616d0000b273372cd9cefda2a6d3d11428fcab67616d0000b2734246e3158421f5abb75abc4fab67616d0000b2735ebcbbc6940d285ccd96e963ab67616d0000b273d1410c1372fab1e516328fa8',\n          width: 60,\n        },\n      ],\n      name: 'święta swięta 🎄',\n      type: 'playlist',\n      uri: 'spotify:playlist:50Gsv3p7qLLPVzfPBu8UcO',\n    },\n    {\n      href: 'https://api.spotify.com/v1/playlists/3nl9GNcLS5xW883RgPypFL',\n      id: '3nl9GNcLS5xW883RgPypFL',\n      images: [\n        {\n          height: 640,\n          url: 'https://mosaic.scdn.co/640/ab67616d0000b2732172b607853fa89cefa2beb4ab67616d0000b2734bc66095f8a70bc4e6593f4fab67616d0000b273838698485511bd9108fadadcab67616d0000b273ccdddb2e5349ea0608c3e016',\n          width: 640,\n        },\n        {\n          height: 300,\n          url: 'https://mosaic.scdn.co/300/ab67616d0000b2732172b607853fa89cefa2beb4ab67616d0000b2734bc66095f8a70bc4e6593f4fab67616d0000b273838698485511bd9108fadadcab67616d0000b273ccdddb2e5349ea0608c3e016',\n          width: 300,\n        },\n        {\n          height: 60,\n          url: 'https://mosaic.scdn.co/60/ab67616d0000b2732172b607853fa89cefa2beb4ab67616d0000b2734bc66095f8a70bc4e6593f4fab67616d0000b273838698485511bd9108fadadcab67616d0000b273ccdddb2e5349ea0608c3e016',\n          width: 60,\n        },\n      ],\n      name: 'Dua Lipa 🍑💫🔥',\n      type: 'playlist',\n      uri: 'spotify:playlist:3nl9GNcLS5xW883RgPypFL',\n    },\n  ],\n}"
			},
			{
				"name": "playlistTracks",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/tests/mocks.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "TracksResponse",
				"defaultValue": "{\n  href: 'https://api.spotify.com/v1/playlists/3nl9GNcLS5xW883RgPypFL/tracks?offset=0&limit=6&locale=en-US%2Cen%3Bq%3D0.9%2Cpl%3Bq%3D0.8%2Cen-GB%3Bq%3D0.7%2Cde%3Bq%3D0.6',\n  items: playlist.tracks?.items ?? [],\n  limit: 6,\n  next: 'https://api.spotify.com/v1/playlists/3nl9GNcLS5xW883RgPypFL/tracks?offset=0&limit=6&locale=en-US%2Cen%3Bq%3D0.9%2Cpl%3Bq%3D0.8%2Cen-GB%3Bq%3D0.7%2Cde%3Bq%3D0.6',\n  offset: 0,\n  previous: null,\n  total: 16,\n}"
			},
			{
				"name": "preview",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": ".storybook/preview.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "Preview",
				"defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
			},
			{
				"name": "Primary",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/stories/button.stories.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "Story",
				"defaultValue": "{\n  render: () => {\n    return {\n      template: `<button type=\"button\" appButton>button</button>`,\n    };\n  },\n}"
			},
			{
				"name": "savedTracks",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/tests/mocks.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "TracksResponse",
				"defaultValue": "{\n  href: 'https://api.spotify.com/v1/me/tracks?offset=0&limit=6&locale=en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7',\n  items: [\n    {\n      added_at: '2024-02-24T11:26:25Z',\n      track: {\n        album: {\n          artists: [\n            {\n              href: 'https://api.spotify.com/v1/artists/7tYKF4w9nC0nq9CsPZTHyP',\n              id: '7tYKF4w9nC0nq9CsPZTHyP',\n              name: 'SZA',\n              type: 'artist',\n              uri: 'spotify:artist:7tYKF4w9nC0nq9CsPZTHyP',\n            },\n          ],\n          id: '1fmBMCSSkSlvxyoy1vut2k',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b273d70916ee9e40c90380ba5f07',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e02d70916ee9e40c90380ba5f07',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d00004851d70916ee9e40c90380ba5f07',\n              width: 64,\n            },\n          ],\n          name: 'Saturn',\n          release_date: '2024-02-22',\n          release_date_precision: 'day',\n          total_tracks: 5,\n          type: 'album',\n          uri: 'spotify:album:1fmBMCSSkSlvxyoy1vut2k',\n        },\n        artists: [\n          {\n            id: '7tYKF4w9nC0nq9CsPZTHyP',\n            name: 'SZA',\n            uri: 'spotify:artist:7tYKF4w9nC0nq9CsPZTHyP',\n          },\n        ],\n\n        duration_ms: 186191,\n        id: '1bjeWoagtHmUKputLVyDxQ',\n        name: 'Saturn',\n        uri: 'spotify:track:1bjeWoagtHmUKputLVyDxQ',\n      },\n    },\n    {\n      added_at: '2024-02-19T10:16:10Z',\n      track: {\n        album: {\n          artists: [\n            {\n              href: 'https://api.spotify.com/v1/artists/0yb46jwm7gqbZXVXZQ8Z1e',\n              id: '0yb46jwm7gqbZXVXZQ8Z1e',\n              name: 'Bishop Briggs',\n              type: 'artist',\n              uri: 'spotify:artist:0yb46jwm7gqbZXVXZQ8Z1e',\n            },\n          ],\n          id: '1TTxcgs3zEngN0EB56yXzY',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b2738cae5034066af45cdfbc4266',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e028cae5034066af45cdfbc4266',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d000048518cae5034066af45cdfbc4266',\n              width: 64,\n            },\n          ],\n          name: 'Church Of Scars',\n          release_date: '2018-04-20',\n          release_date_precision: 'day',\n          total_tracks: 10,\n          type: 'album',\n          uri: 'spotify:album:1TTxcgs3zEngN0EB56yXzY',\n        },\n        artists: [\n          {\n            href: 'https://api.spotify.com/v1/artists/0yb46jwm7gqbZXVXZQ8Z1e',\n            id: '0yb46jwm7gqbZXVXZQ8Z1e',\n            name: 'Bishop Briggs',\n            type: 'artist',\n            uri: 'spotify:artist:0yb46jwm7gqbZXVXZQ8Z1e',\n          },\n        ],\n        duration_ms: 216133,\n        id: '3mRLHiSHYtC8Hk7bzZdUs1',\n        name: 'River',\n        uri: 'spotify:track:3mRLHiSHYtC8Hk7bzZdUs1',\n      },\n    },\n    {\n      added_at: '2024-02-19T10:02:31Z',\n      track: {\n        album: {\n          artists: [\n            {\n              href: 'https://api.spotify.com/v1/artists/0khqcsFxd6ans7Zh1JqraT',\n              id: '0khqcsFxd6ans7Zh1JqraT',\n              name: 'Croosh',\n              type: 'artist',\n              uri: 'spotify:artist:0khqcsFxd6ans7Zh1JqraT',\n            },\n          ],\n          id: '1aweukI723QfBLT8sImfHK',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b27310311a15fdac768608fe224d',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e0210311a15fdac768608fe224d',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d0000485110311a15fdac768608fe224d',\n              width: 64,\n            },\n          ],\n          name: 'Daggers',\n          release_date: '2023-11-15',\n          release_date_precision: 'day',\n          total_tracks: 1,\n          type: 'album',\n          uri: 'spotify:album:1aweukI723QfBLT8sImfHK',\n        },\n        artists: [\n          {\n            href: 'https://api.spotify.com/v1/artists/0khqcsFxd6ans7Zh1JqraT',\n            id: '0khqcsFxd6ans7Zh1JqraT',\n            name: 'Croosh',\n            type: 'artist',\n            uri: 'spotify:artist:0khqcsFxd6ans7Zh1JqraT',\n          },\n        ],\n        duration_ms: 139320,\n        id: '0fu2fafqUSNk0PKgOEvTgt',\n        name: 'Daggers',\n        uri: 'spotify:track:0fu2fafqUSNk0PKgOEvTgt',\n      },\n    },\n    {\n      added_at: '2024-02-19T09:34:30Z',\n      track: {\n        album: {\n          artists: [\n            {\n              href: 'https://api.spotify.com/v1/artists/0wiCfDEHaEcPkKZOi7Nivl',\n              id: '0wiCfDEHaEcPkKZOi7Nivl',\n              name: 'Yamê',\n              type: 'artist',\n              uri: 'spotify:artist:0wiCfDEHaEcPkKZOi7Nivl',\n            },\n          ],\n          id: '7oBuvko8hsXKXHEUHvDXnB',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b2737dfba3f3ae607f250cdd969c',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e027dfba3f3ae607f250cdd969c',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d000048517dfba3f3ae607f250cdd969c',\n              width: 64,\n            },\n          ],\n          name: 'Bécane - A COLORS SHOW',\n          release_date: '2023-06-01',\n          release_date_precision: 'day',\n          total_tracks: 1,\n          type: 'album',\n          uri: 'spotify:album:7oBuvko8hsXKXHEUHvDXnB',\n        },\n        artists: [\n          {\n            href: 'https://api.spotify.com/v1/artists/0wiCfDEHaEcPkKZOi7Nivl',\n            id: '0wiCfDEHaEcPkKZOi7Nivl',\n            name: 'Yamê',\n            type: 'artist',\n            uri: 'spotify:artist:0wiCfDEHaEcPkKZOi7Nivl',\n          },\n        ],\n\n        duration_ms: 182440,\n        id: '3oUEzTAoOxqZHN4xiqTGqJ',\n        name: 'Bécane - A COLORS SHOW',\n        uri: 'spotify:track:3oUEzTAoOxqZHN4xiqTGqJ',\n      },\n    },\n    {\n      added_at: '2024-01-26T22:39:23Z',\n      track: {\n        album: {\n          artists: [\n            {\n              href: 'https://api.spotify.com/v1/artists/6vNe5MINTo5QZyR08sBOBA',\n              id: '6vNe5MINTo5QZyR08sBOBA',\n              name: 'Anna Naklab',\n              type: 'artist',\n              uri: 'spotify:artist:6vNe5MINTo5QZyR08sBOBA',\n            },\n            {\n              href: 'https://api.spotify.com/v1/artists/61ipISvUVa5LkJlKZnm3Oo',\n              id: '61ipISvUVa5LkJlKZnm3Oo',\n              name: 'Alle Farben',\n              type: 'artist',\n              uri: 'spotify:artist:61ipISvUVa5LkJlKZnm3Oo',\n            },\n            {\n              href: 'https://api.spotify.com/v1/artists/67ghKnycRX6VM1xfqJSMlH',\n              id: '67ghKnycRX6VM1xfqJSMlH',\n              name: 'YouNotUs',\n              type: 'artist',\n              uri: 'spotify:artist:67ghKnycRX6VM1xfqJSMlH',\n            },\n          ],\n          id: '1anF1BUZXIUqdHz0hR7rqK',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b27360e18fbad67fc3c48608d03a',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e0260e18fbad67fc3c48608d03a',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d0000485160e18fbad67fc3c48608d03a',\n              width: 64,\n            },\n          ],\n          name: 'Supergirl (Radio Edit)',\n          release_date: '2015-03-25',\n          release_date_precision: 'day',\n          total_tracks: 1,\n          type: 'album',\n          uri: 'spotify:album:1anF1BUZXIUqdHz0hR7rqK',\n        },\n        artists: [\n          {\n            id: '6vNe5MINTo5QZyR08sBOBA',\n            name: 'Anna Naklab',\n            uri: 'spotify:artist:6vNe5MINTo5QZyR08sBOBA',\n          },\n          {\n            id: '61ipISvUVa5LkJlKZnm3Oo',\n            name: 'Alle Farben',\n            uri: 'spotify:artist:61ipISvUVa5LkJlKZnm3Oo',\n          },\n          {\n            id: '67ghKnycRX6VM1xfqJSMlH',\n            name: 'YouNotUs',\n            uri: 'spotify:artist:67ghKnycRX6VM1xfqJSMlH',\n          },\n        ],\n\n        duration_ms: 212826,\n        id: '5wK2U8OltPg94tShNIzUZQ',\n        name: 'Supergirl - Radio Edit',\n        uri: 'spotify:track:5wK2U8OltPg94tShNIzUZQ',\n      },\n    },\n    {\n      added_at: '2023-12-30T14:52:15Z',\n      track: {\n        album: {\n          artists: [\n            {\n              id: '3BmGtnKgCSGYIUhmivXKWX',\n              name: 'Kelly Clarkson',\n              uri: 'spotify:artist:3BmGtnKgCSGYIUhmivXKWX',\n            },\n          ],\n          id: '5sVFXIMrFRKBtDOexVlBBU',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b2731fa667a7a53c7072fed91a17',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e021fa667a7a53c7072fed91a17',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d000048511fa667a7a53c7072fed91a17',\n              width: 64,\n            },\n          ],\n          name: 'When Christmas Comes Around...',\n          release_date: '2021-10-15',\n          release_date_precision: 'day',\n          total_tracks: 15,\n          type: 'album',\n          uri: 'spotify:album:5sVFXIMrFRKBtDOexVlBBU',\n        },\n        artists: [\n          {\n            id: '3BmGtnKgCSGYIUhmivXKWX',\n            name: 'Kelly Clarkson',\n            uri: 'spotify:artist:3BmGtnKgCSGYIUhmivXKWX',\n          },\n          {\n            id: '66CXWjxzNUsdJxJ2JdwvnR',\n            name: 'Ariana Grande',\n            uri: 'spotify:artist:66CXWjxzNUsdJxJ2JdwvnR',\n          },\n        ],\n\n        duration_ms: 242644,\n        id: '2O3MQ6H3gjrIWDcpeTrikT',\n        name: 'Santa, Can’t You Hear Me',\n        uri: 'spotify:track:2O3MQ6H3gjrIWDcpeTrikT',\n      },\n    },\n  ],\n  limit: 6,\n  next: 'https://api.spotify.com/v1/me/tracks?offset=6&limit=6&locale=en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7',\n  offset: 0,\n  previous: null,\n  total: 373,\n}"
			},
			{
				"name": "searchResponse",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/tests/mocks.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "SearchResponse",
				"defaultValue": "{\n  tracks: {\n    items: [\n      {\n        album: {\n          artists: [\n            {\n              href: 'https://api.spotify.com/v1/artists/0LyfQWJT6nXafLPZqxe9Of',\n              id: '0LyfQWJT6nXafLPZqxe9Of',\n              name: 'Various Artists',\n              type: 'artist',\n              uri: 'spotify:artist:0LyfQWJT6nXafLPZqxe9Of',\n            },\n          ],\n          id: '4qO2T8ZnNedvby1faWQE5p',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b273510b37e772bdf2e8204beb0a',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e02510b37e772bdf2e8204beb0a',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d00004851510b37e772bdf2e8204beb0a',\n              width: 64,\n            },\n          ],\n          name: 'Sześć Oceanów (Piosenki 1962-2013)',\n          release_date: '2014-11-03',\n          release_date_precision: 'day',\n          total_tracks: 90,\n          type: 'album',\n          uri: 'spotify:album:4qO2T8ZnNedvby1faWQE5p',\n        },\n        artists: [\n          {\n            href: 'https://api.spotify.com/v1/artists/1IYFJPQcbXYjgkyebYs1w6',\n            id: '1IYFJPQcbXYjgkyebYs1w6',\n            name: 'Maryla Rodowicz',\n            type: 'artist',\n            uri: 'spotify:artist:1IYFJPQcbXYjgkyebYs1w6',\n          },\n        ],\n        duration_ms: 265293,\n        id: '406CXfShfgeftnNLmJl49t',\n        name: 'Małgośka',\n        uri: 'spotify:track:406CXfShfgeftnNLmJl49t',\n      },\n    ],\n  },\n}"
			},
			{
				"name": "SPORIFY_SCOPES",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/app/utils/config.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "[]",
				"defaultValue": "[\n  'user-read-private',\n  'user-read-email',\n  'user-read-currently-playing',\n  'user-read-recently-played',\n  'user-modify-playback-state',\n  'streaming',\n  'user-library-modify',\n  'user-library-read',\n  'user-top-read',\n]"
			},
			{
				"name": "Text",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/stories/button.stories.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "Story",
				"defaultValue": "{\n  render: () => {\n    return {\n      template: `<button type=\"button\" [mode]=\"'text'\" appButton>button</button>`,\n    };\n  },\n}"
			},
			{
				"name": "Track",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/stories/track.stories.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "Story",
				"defaultValue": "{\n  args: {\n    track: savedTracks.items[0].track,\n  },\n}"
			},
			{
				"name": "user",
				"ctype": "miscellaneous",
				"subtype": "variable",
				"file": "src/tests/mocks.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"type": "User",
				"defaultValue": "{\n  display_name: 'pieceofsth7',\n  external_urls: {\n    spotify: 'https://open.spotify.com/user/f2o7vc8wi9351bcn76igbhe2i',\n  },\n  href: 'https://api.spotify.com/v1/users/f2o7vc8wi9351bcn76igbhe2i',\n  id: 'f2o7vc8wi9351bcn76igbhe2i',\n  images: [\n    {\n      url: 'https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=2046809475373475&height=50&width=50&ext=1711003338&hash=AfrKCTPEXL-APstaCRqb6iOzqjl5RHKOwdXRP0WTcNeYdQ',\n      height: 64,\n      width: 64,\n    },\n    {\n      url: 'https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=2046809475373475&height=300&width=300&ext=1711003338&hash=AfqKpNyFIAuS_M4gwqL8eAZNp2fgALFMnqTRsvVRRG4E5g',\n      height: 300,\n      width: 300,\n    },\n  ],\n  type: 'user',\n  uri: 'spotify:user:f2o7vc8wi9351bcn76igbhe2i',\n  followers: {\n    total: 7,\n  },\n  country: 'PL',\n  product: 'premium',\n  explicit_content: {\n    filter_enabled: false,\n    filter_locked: false,\n  },\n  email: 'magdakochman7@gmail.com',\n}"
			}
		],
		"functions": [
			{
				"name": "base64url",
				"file": "src/app/utils/utils.ts",
				"ctype": "miscellaneous",
				"subtype": "function",
				"deprecated": false,
				"deprecationMessage": "",
				"description": "",
				"args": [
					{
						"name": "bytes",
						"type": "Uint8Array",
						"deprecated": false,
						"deprecationMessage": ""
					}
				],
				"jsdoctags": [
					{
						"name": "bytes",
						"type": "Uint8Array",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					}
				]
			},
			{
				"name": "createQuery",
				"file": "src/app/utils/createQuery.ts",
				"ctype": "miscellaneous",
				"subtype": "function",
				"deprecated": false,
				"deprecationMessage": "",
				"description": "",
				"args": [
					{
						"name": "queryKey",
						"type": "TQueryKey",
						"deprecated": false,
						"deprecationMessage": ""
					},
					{
						"name": "query",
						"type": "Observable",
						"deprecated": false,
						"deprecationMessage": ""
					},
					{
						"name": "queryEnabled",
						"type": "boolean",
						"deprecated": false,
						"deprecationMessage": "",
						"defaultValue": "true"
					}
				],
				"jsdoctags": [
					{
						"name": "queryKey",
						"type": "TQueryKey",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					},
					{
						"name": "query",
						"type": "Observable",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					},
					{
						"name": "queryEnabled",
						"type": "boolean",
						"deprecated": false,
						"deprecationMessage": "",
						"defaultValue": "true",
						"tagName": {
							"text": "param"
						}
					}
				]
			},
			{
				"name": "generateCodeChallenge",
				"file": "src/app/utils/utils.ts",
				"ctype": "miscellaneous",
				"subtype": "function",
				"deprecated": false,
				"deprecationMessage": "",
				"description": "",
				"args": [
					{
						"name": "code_verifier",
						"type": "string",
						"deprecated": false,
						"deprecationMessage": ""
					}
				],
				"jsdoctags": [
					{
						"name": "code_verifier",
						"type": "string",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					}
				]
			},
			{
				"name": "randomBytes",
				"file": "src/app/utils/utils.ts",
				"ctype": "miscellaneous",
				"subtype": "function",
				"deprecated": false,
				"deprecationMessage": "",
				"description": "",
				"args": [
					{
						"name": "size",
						"type": "number",
						"deprecated": false,
						"deprecationMessage": ""
					}
				],
				"jsdoctags": [
					{
						"name": "size",
						"type": "number",
						"deprecated": false,
						"deprecationMessage": "",
						"tagName": {
							"text": "param"
						}
					}
				]
			}
		],
		"typealiases": [
			{
				"name": "ButtonMode",
				"ctype": "miscellaneous",
				"subtype": "typealias",
				"rawtype": "\"text\" | \"opacity\"",
				"file": "src/app/shared/button/button.directive.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"description": "",
				"kind": 192
			},
			{
				"name": "DataWithSate",
				"ctype": "miscellaneous",
				"subtype": "typealias",
				"rawtype": "literal type | literal type",
				"file": "src/app/shared/interfaces/dataWithState.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"description": "",
				"kind": 192
			},
			{
				"name": "Icons",
				"ctype": "miscellaneous",
				"subtype": "typealias",
				"rawtype": "",
				"file": "src/app/utils/icons.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"description": "",
				"kind": 198
			},
			{
				"name": "Story",
				"ctype": "miscellaneous",
				"subtype": "typealias",
				"rawtype": "StoryObj<ButtonDirective>",
				"file": "src/stories/button.stories.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"description": "",
				"kind": 183
			},
			{
				"name": "Story",
				"ctype": "miscellaneous",
				"subtype": "typealias",
				"rawtype": "StoryObj<TrackComponent>",
				"file": "src/stories/track.stories.ts",
				"deprecated": false,
				"deprecationMessage": "",
				"description": "",
				"kind": 183
			}
		],
		"enumerations": [],
		"groupedVariables": {
			"src/app/app-config.ts": [
				{
					"name": "appConfig",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/app/app-config.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "ApplicationConfig",
					"defaultValue": "{\n  providers: [\n    importProvidersFrom([HttpClientModule, BrowserAnimationsModule]),\n    provideRouter(routes),\n    provideAngularQuery(\n      new QueryClient({\n        defaultOptions: { queries: { placeholderData: keepPreviousData } },\n      })\n    ),\n    {\n      provide: HTTP_INTERCEPTORS,\n      useFactory: () => {\n        return new AuthInterceptor();\n      },\n      multi: true,\n      deps: [AuthService],\n    },\n    { provide: MAT_SNACK_BAR_DEFAULT_OPTIONS, useValue: { duration: 2500 } },\n    PlayerService,\n  ],\n}"
				}
			],
			"src/app/utils/config.ts": [
				{
					"name": "BASE_URL",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/app/utils/config.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"defaultValue": "'https://api.spotify.com/v1/'"
				},
				{
					"name": "CLIENT_ID",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/app/utils/config.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "string",
					"defaultValue": "'57a795ef5d9a4ccca747877d47fbc61d'"
				},
				{
					"name": "HEADER_CONFIG",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/app/utils/config.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "object",
					"defaultValue": "{\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  },\n}"
				},
				{
					"name": "SPORIFY_SCOPES",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/app/utils/config.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "[]",
					"defaultValue": "[\n  'user-read-private',\n  'user-read-email',\n  'user-read-currently-playing',\n  'user-read-recently-played',\n  'user-modify-playback-state',\n  'streaming',\n  'user-library-modify',\n  'user-library-read',\n  'user-top-read',\n]"
				}
			],
			"src/environments/environment.prod.ts": [
				{
					"name": "environment",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/environments/environment.prod.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "object",
					"defaultValue": "{\n  production: true,\n  redirectUri: 'https://magda98.github.io/SpotRx/'\n}"
				}
			],
			"src/environments/environment.ts": [
				{
					"name": "environment",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/environments/environment.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "object",
					"defaultValue": "{\n  production: false,\n  redirectUri: 'http://localhost:4200/',\n}"
				}
			],
			"src/tests/mocks.ts": [
				{
					"name": "featuredPlaylists",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/tests/mocks.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "FeaturedPlaylistResponse",
					"defaultValue": "{\n  message: 'Popular Playlists',\n  playlists: {\n    items: [\n      {\n        description:\n          'Największe rapowe kawałki w tej chwili. Cover: Otsochodzi',\n        href: 'https://api.spotify.com/v1/playlists/37i9dQZF1DWXJnyndhASBe',\n        id: '37i9dQZF1DWXJnyndhASBe',\n        images: [\n          {\n            height: null,\n            url: 'https://i.scdn.co/image/ab67706f000000022853dbf3a386ff35d0e95867',\n            width: null,\n          },\n        ],\n        name: 'RAP GENERACJA',\n        primary_color: '#ffffff',\n        type: 'playlist',\n        uri: 'spotify:playlist:37i9dQZF1DWXJnyndhASBe',\n      },\n      {\n        description: '50 najgorętszych hitów w Polsce. Cover: Kizo, Bletka',\n        href: 'https://api.spotify.com/v1/playlists/37i9dQZF1DX49bSMRljsho',\n        id: '37i9dQZF1DX49bSMRljsho',\n        images: [\n          {\n            height: null,\n            url: 'https://i.scdn.co/image/ab67706f00000002419aba98b988e66b49397503',\n            width: null,\n          },\n        ],\n        name: 'Hot Hits Polska',\n        primary_color: '#ffffff',\n        type: 'playlist',\n        uri: 'spotify:playlist:37i9dQZF1DX49bSMRljsho',\n      },\n      {\n        description: '🤰🏻🤰🏻🤰🏻🤰🏻🤰🏻 cover: Fagata',\n        href: 'https://api.spotify.com/v1/playlists/37i9dQZF1DX35mEXECRn6o',\n        id: '37i9dQZF1DX35mEXECRn6o',\n        images: [\n          {\n            height: null,\n            url: 'https://i.scdn.co/image/ab67706f0000000256022bab9d8032623325602c',\n            width: null,\n          },\n        ],\n        name: 'viral rap',\n        primary_color: '#3ffc04',\n        type: 'playlist',\n        uri: 'spotify:playlist:37i9dQZF1DX35mEXECRn6o',\n      },\n      {\n        description: 'Playlista pełna radiowych przebojów ostatnich miesięcy.',\n        href: 'https://api.spotify.com/v1/playlists/37i9dQZF1DX99QlO9EobD7',\n        id: '37i9dQZF1DX99QlO9EobD7',\n        images: [\n          {\n            height: null,\n            url: 'https://i.scdn.co/image/ab67706f000000028b3b83b2962b242445ad0ea0',\n            width: null,\n          },\n        ],\n        name: 'Hity z radia 2024',\n        primary_color: '#ffffff',\n        type: 'playlist',\n        uri: 'spotify:playlist:37i9dQZF1DX99QlO9EobD7',\n      },\n    ],\n    limit: 12,\n    offset: 0,\n    total: 100,\n  },\n}"
				},
				{
					"name": "playlist",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/tests/mocks.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Playlist",
					"defaultValue": "{\n  id: '50Gsv3p7qLLPVzfPBu8UcO',\n  href: 'https://api.spotify.com/v1/playlists/50Gsv3p7qLLPVzfPBu8UcO?locale=en-US%2Cen%3Bq%3D0.9%2Cpl-PL%3Bq%3D0.8%2Cpl%3Bq%3D0.7',\n  images: [\n    {\n      height: 640,\n      url: 'https://mosaic.scdn.co/640/ab67616d00001e02372cd9cefda2a6d3d11428fcab67616d00001e024246e3158421f5abb75abc4fab67616d00001e025ebcbbc6940d285ccd96e963ab67616d00001e02d1410c1372fab1e516328fa8',\n      width: 640,\n    },\n    {\n      height: 300,\n      url: 'https://mosaic.scdn.co/300/ab67616d00001e02372cd9cefda2a6d3d11428fcab67616d00001e024246e3158421f5abb75abc4fab67616d00001e025ebcbbc6940d285ccd96e963ab67616d00001e02d1410c1372fab1e516328fa8',\n      width: 300,\n    },\n    {\n      height: 60,\n      url: 'https://mosaic.scdn.co/60/ab67616d00001e02372cd9cefda2a6d3d11428fcab67616d00001e024246e3158421f5abb75abc4fab67616d00001e025ebcbbc6940d285ccd96e963ab67616d00001e02d1410c1372fab1e516328fa8',\n      width: 60,\n    },\n  ],\n  name: 'Dua Lipa 🍑💫🔥',\n  tracks: {\n    href: 'https://api.spotify.com/v1/playlists/50Gsv3p7qLLPVzfPBu8UcO/tracks?offset=0&limit=100&locale=en-US%2Cen%3Bq%3D0.9%2Cpl-PL%3Bq%3D0.8%2Cpl%3Bq%3D0.7',\n    items: [\n      {\n        added_at: '2021-11-25T07:44:16Z',\n        track: {\n          album: {\n            id: '01sfgrNbnnPUEyz6GZYlt9',\n            images: [\n              {\n                url: 'https://i.scdn.co/image/ab67616d0000b273d1410c1372fab1e516328fa8',\n                width: 640,\n                height: 640,\n              },\n              {\n                url: 'https://i.scdn.co/image/ab67616d00001e02d1410c1372fab1e516328fa8',\n                width: 300,\n                height: 300,\n              },\n              {\n                url: 'https://i.scdn.co/image/ab67616d00004851d1410c1372fab1e516328fa8',\n                width: 64,\n                height: 64,\n              },\n            ],\n            name: 'Everyday Is Christmas (Deluxe Edition)',\n          },\n          artists: [\n            {\n              id: '5WUlDfRSoLAfcVSX1WnrxN',\n              name: 'Sia',\n              uri: 'spotify:artist:5WUlDfRSoLAfcVSX1WnrxN',\n            },\n          ],\n          duration_ms: 206539,\n\n          id: '1N1ZpYUJc9fwrqk53FGgWv',\n          name: \"Santa's Coming for Us\",\n          uri: 'spotify:track:1N1ZpYUJc9fwrqk53FGgWv',\n        },\n      },\n    ],\n    limit: 100,\n    offset: 0,\n    total: 1,\n    next: '',\n    previous: '',\n  },\n  type: 'playlist',\n  uri: 'spotify:playlist:50Gsv3p7qLLPVzfPBu8UcO',\n}"
				},
				{
					"name": "playlistsResponse",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/tests/mocks.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "PlaylistResponse",
					"defaultValue": "{\n  total: 2,\n  limit: 12,\n  offset: 0,\n  items: [\n    {\n      href: 'https://api.spotify.com/v1/playlists/50Gsv3p7qLLPVzfPBu8UcO',\n      id: '50Gsv3p7qLLPVzfPBu8UcO',\n      images: [\n        {\n          height: 640,\n          url: 'https://mosaic.scdn.co/640/ab67616d0000b273372cd9cefda2a6d3d11428fcab67616d0000b2734246e3158421f5abb75abc4fab67616d0000b2735ebcbbc6940d285ccd96e963ab67616d0000b273d1410c1372fab1e516328fa8',\n          width: 640,\n        },\n        {\n          height: 300,\n          url: 'https://mosaic.scdn.co/300/ab67616d0000b273372cd9cefda2a6d3d11428fcab67616d0000b2734246e3158421f5abb75abc4fab67616d0000b2735ebcbbc6940d285ccd96e963ab67616d0000b273d1410c1372fab1e516328fa8',\n          width: 300,\n        },\n        {\n          height: 60,\n          url: 'https://mosaic.scdn.co/60/ab67616d0000b273372cd9cefda2a6d3d11428fcab67616d0000b2734246e3158421f5abb75abc4fab67616d0000b2735ebcbbc6940d285ccd96e963ab67616d0000b273d1410c1372fab1e516328fa8',\n          width: 60,\n        },\n      ],\n      name: 'święta swięta 🎄',\n      type: 'playlist',\n      uri: 'spotify:playlist:50Gsv3p7qLLPVzfPBu8UcO',\n    },\n    {\n      href: 'https://api.spotify.com/v1/playlists/3nl9GNcLS5xW883RgPypFL',\n      id: '3nl9GNcLS5xW883RgPypFL',\n      images: [\n        {\n          height: 640,\n          url: 'https://mosaic.scdn.co/640/ab67616d0000b2732172b607853fa89cefa2beb4ab67616d0000b2734bc66095f8a70bc4e6593f4fab67616d0000b273838698485511bd9108fadadcab67616d0000b273ccdddb2e5349ea0608c3e016',\n          width: 640,\n        },\n        {\n          height: 300,\n          url: 'https://mosaic.scdn.co/300/ab67616d0000b2732172b607853fa89cefa2beb4ab67616d0000b2734bc66095f8a70bc4e6593f4fab67616d0000b273838698485511bd9108fadadcab67616d0000b273ccdddb2e5349ea0608c3e016',\n          width: 300,\n        },\n        {\n          height: 60,\n          url: 'https://mosaic.scdn.co/60/ab67616d0000b2732172b607853fa89cefa2beb4ab67616d0000b2734bc66095f8a70bc4e6593f4fab67616d0000b273838698485511bd9108fadadcab67616d0000b273ccdddb2e5349ea0608c3e016',\n          width: 60,\n        },\n      ],\n      name: 'Dua Lipa 🍑💫🔥',\n      type: 'playlist',\n      uri: 'spotify:playlist:3nl9GNcLS5xW883RgPypFL',\n    },\n  ],\n}"
				},
				{
					"name": "playlistTracks",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/tests/mocks.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "TracksResponse",
					"defaultValue": "{\n  href: 'https://api.spotify.com/v1/playlists/3nl9GNcLS5xW883RgPypFL/tracks?offset=0&limit=6&locale=en-US%2Cen%3Bq%3D0.9%2Cpl%3Bq%3D0.8%2Cen-GB%3Bq%3D0.7%2Cde%3Bq%3D0.6',\n  items: playlist.tracks?.items ?? [],\n  limit: 6,\n  next: 'https://api.spotify.com/v1/playlists/3nl9GNcLS5xW883RgPypFL/tracks?offset=0&limit=6&locale=en-US%2Cen%3Bq%3D0.9%2Cpl%3Bq%3D0.8%2Cen-GB%3Bq%3D0.7%2Cde%3Bq%3D0.6',\n  offset: 0,\n  previous: null,\n  total: 16,\n}"
				},
				{
					"name": "savedTracks",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/tests/mocks.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "TracksResponse",
					"defaultValue": "{\n  href: 'https://api.spotify.com/v1/me/tracks?offset=0&limit=6&locale=en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7',\n  items: [\n    {\n      added_at: '2024-02-24T11:26:25Z',\n      track: {\n        album: {\n          artists: [\n            {\n              href: 'https://api.spotify.com/v1/artists/7tYKF4w9nC0nq9CsPZTHyP',\n              id: '7tYKF4w9nC0nq9CsPZTHyP',\n              name: 'SZA',\n              type: 'artist',\n              uri: 'spotify:artist:7tYKF4w9nC0nq9CsPZTHyP',\n            },\n          ],\n          id: '1fmBMCSSkSlvxyoy1vut2k',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b273d70916ee9e40c90380ba5f07',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e02d70916ee9e40c90380ba5f07',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d00004851d70916ee9e40c90380ba5f07',\n              width: 64,\n            },\n          ],\n          name: 'Saturn',\n          release_date: '2024-02-22',\n          release_date_precision: 'day',\n          total_tracks: 5,\n          type: 'album',\n          uri: 'spotify:album:1fmBMCSSkSlvxyoy1vut2k',\n        },\n        artists: [\n          {\n            id: '7tYKF4w9nC0nq9CsPZTHyP',\n            name: 'SZA',\n            uri: 'spotify:artist:7tYKF4w9nC0nq9CsPZTHyP',\n          },\n        ],\n\n        duration_ms: 186191,\n        id: '1bjeWoagtHmUKputLVyDxQ',\n        name: 'Saturn',\n        uri: 'spotify:track:1bjeWoagtHmUKputLVyDxQ',\n      },\n    },\n    {\n      added_at: '2024-02-19T10:16:10Z',\n      track: {\n        album: {\n          artists: [\n            {\n              href: 'https://api.spotify.com/v1/artists/0yb46jwm7gqbZXVXZQ8Z1e',\n              id: '0yb46jwm7gqbZXVXZQ8Z1e',\n              name: 'Bishop Briggs',\n              type: 'artist',\n              uri: 'spotify:artist:0yb46jwm7gqbZXVXZQ8Z1e',\n            },\n          ],\n          id: '1TTxcgs3zEngN0EB56yXzY',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b2738cae5034066af45cdfbc4266',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e028cae5034066af45cdfbc4266',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d000048518cae5034066af45cdfbc4266',\n              width: 64,\n            },\n          ],\n          name: 'Church Of Scars',\n          release_date: '2018-04-20',\n          release_date_precision: 'day',\n          total_tracks: 10,\n          type: 'album',\n          uri: 'spotify:album:1TTxcgs3zEngN0EB56yXzY',\n        },\n        artists: [\n          {\n            href: 'https://api.spotify.com/v1/artists/0yb46jwm7gqbZXVXZQ8Z1e',\n            id: '0yb46jwm7gqbZXVXZQ8Z1e',\n            name: 'Bishop Briggs',\n            type: 'artist',\n            uri: 'spotify:artist:0yb46jwm7gqbZXVXZQ8Z1e',\n          },\n        ],\n        duration_ms: 216133,\n        id: '3mRLHiSHYtC8Hk7bzZdUs1',\n        name: 'River',\n        uri: 'spotify:track:3mRLHiSHYtC8Hk7bzZdUs1',\n      },\n    },\n    {\n      added_at: '2024-02-19T10:02:31Z',\n      track: {\n        album: {\n          artists: [\n            {\n              href: 'https://api.spotify.com/v1/artists/0khqcsFxd6ans7Zh1JqraT',\n              id: '0khqcsFxd6ans7Zh1JqraT',\n              name: 'Croosh',\n              type: 'artist',\n              uri: 'spotify:artist:0khqcsFxd6ans7Zh1JqraT',\n            },\n          ],\n          id: '1aweukI723QfBLT8sImfHK',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b27310311a15fdac768608fe224d',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e0210311a15fdac768608fe224d',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d0000485110311a15fdac768608fe224d',\n              width: 64,\n            },\n          ],\n          name: 'Daggers',\n          release_date: '2023-11-15',\n          release_date_precision: 'day',\n          total_tracks: 1,\n          type: 'album',\n          uri: 'spotify:album:1aweukI723QfBLT8sImfHK',\n        },\n        artists: [\n          {\n            href: 'https://api.spotify.com/v1/artists/0khqcsFxd6ans7Zh1JqraT',\n            id: '0khqcsFxd6ans7Zh1JqraT',\n            name: 'Croosh',\n            type: 'artist',\n            uri: 'spotify:artist:0khqcsFxd6ans7Zh1JqraT',\n          },\n        ],\n        duration_ms: 139320,\n        id: '0fu2fafqUSNk0PKgOEvTgt',\n        name: 'Daggers',\n        uri: 'spotify:track:0fu2fafqUSNk0PKgOEvTgt',\n      },\n    },\n    {\n      added_at: '2024-02-19T09:34:30Z',\n      track: {\n        album: {\n          artists: [\n            {\n              href: 'https://api.spotify.com/v1/artists/0wiCfDEHaEcPkKZOi7Nivl',\n              id: '0wiCfDEHaEcPkKZOi7Nivl',\n              name: 'Yamê',\n              type: 'artist',\n              uri: 'spotify:artist:0wiCfDEHaEcPkKZOi7Nivl',\n            },\n          ],\n          id: '7oBuvko8hsXKXHEUHvDXnB',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b2737dfba3f3ae607f250cdd969c',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e027dfba3f3ae607f250cdd969c',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d000048517dfba3f3ae607f250cdd969c',\n              width: 64,\n            },\n          ],\n          name: 'Bécane - A COLORS SHOW',\n          release_date: '2023-06-01',\n          release_date_precision: 'day',\n          total_tracks: 1,\n          type: 'album',\n          uri: 'spotify:album:7oBuvko8hsXKXHEUHvDXnB',\n        },\n        artists: [\n          {\n            href: 'https://api.spotify.com/v1/artists/0wiCfDEHaEcPkKZOi7Nivl',\n            id: '0wiCfDEHaEcPkKZOi7Nivl',\n            name: 'Yamê',\n            type: 'artist',\n            uri: 'spotify:artist:0wiCfDEHaEcPkKZOi7Nivl',\n          },\n        ],\n\n        duration_ms: 182440,\n        id: '3oUEzTAoOxqZHN4xiqTGqJ',\n        name: 'Bécane - A COLORS SHOW',\n        uri: 'spotify:track:3oUEzTAoOxqZHN4xiqTGqJ',\n      },\n    },\n    {\n      added_at: '2024-01-26T22:39:23Z',\n      track: {\n        album: {\n          artists: [\n            {\n              href: 'https://api.spotify.com/v1/artists/6vNe5MINTo5QZyR08sBOBA',\n              id: '6vNe5MINTo5QZyR08sBOBA',\n              name: 'Anna Naklab',\n              type: 'artist',\n              uri: 'spotify:artist:6vNe5MINTo5QZyR08sBOBA',\n            },\n            {\n              href: 'https://api.spotify.com/v1/artists/61ipISvUVa5LkJlKZnm3Oo',\n              id: '61ipISvUVa5LkJlKZnm3Oo',\n              name: 'Alle Farben',\n              type: 'artist',\n              uri: 'spotify:artist:61ipISvUVa5LkJlKZnm3Oo',\n            },\n            {\n              href: 'https://api.spotify.com/v1/artists/67ghKnycRX6VM1xfqJSMlH',\n              id: '67ghKnycRX6VM1xfqJSMlH',\n              name: 'YouNotUs',\n              type: 'artist',\n              uri: 'spotify:artist:67ghKnycRX6VM1xfqJSMlH',\n            },\n          ],\n          id: '1anF1BUZXIUqdHz0hR7rqK',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b27360e18fbad67fc3c48608d03a',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e0260e18fbad67fc3c48608d03a',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d0000485160e18fbad67fc3c48608d03a',\n              width: 64,\n            },\n          ],\n          name: 'Supergirl (Radio Edit)',\n          release_date: '2015-03-25',\n          release_date_precision: 'day',\n          total_tracks: 1,\n          type: 'album',\n          uri: 'spotify:album:1anF1BUZXIUqdHz0hR7rqK',\n        },\n        artists: [\n          {\n            id: '6vNe5MINTo5QZyR08sBOBA',\n            name: 'Anna Naklab',\n            uri: 'spotify:artist:6vNe5MINTo5QZyR08sBOBA',\n          },\n          {\n            id: '61ipISvUVa5LkJlKZnm3Oo',\n            name: 'Alle Farben',\n            uri: 'spotify:artist:61ipISvUVa5LkJlKZnm3Oo',\n          },\n          {\n            id: '67ghKnycRX6VM1xfqJSMlH',\n            name: 'YouNotUs',\n            uri: 'spotify:artist:67ghKnycRX6VM1xfqJSMlH',\n          },\n        ],\n\n        duration_ms: 212826,\n        id: '5wK2U8OltPg94tShNIzUZQ',\n        name: 'Supergirl - Radio Edit',\n        uri: 'spotify:track:5wK2U8OltPg94tShNIzUZQ',\n      },\n    },\n    {\n      added_at: '2023-12-30T14:52:15Z',\n      track: {\n        album: {\n          artists: [\n            {\n              id: '3BmGtnKgCSGYIUhmivXKWX',\n              name: 'Kelly Clarkson',\n              uri: 'spotify:artist:3BmGtnKgCSGYIUhmivXKWX',\n            },\n          ],\n          id: '5sVFXIMrFRKBtDOexVlBBU',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b2731fa667a7a53c7072fed91a17',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e021fa667a7a53c7072fed91a17',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d000048511fa667a7a53c7072fed91a17',\n              width: 64,\n            },\n          ],\n          name: 'When Christmas Comes Around...',\n          release_date: '2021-10-15',\n          release_date_precision: 'day',\n          total_tracks: 15,\n          type: 'album',\n          uri: 'spotify:album:5sVFXIMrFRKBtDOexVlBBU',\n        },\n        artists: [\n          {\n            id: '3BmGtnKgCSGYIUhmivXKWX',\n            name: 'Kelly Clarkson',\n            uri: 'spotify:artist:3BmGtnKgCSGYIUhmivXKWX',\n          },\n          {\n            id: '66CXWjxzNUsdJxJ2JdwvnR',\n            name: 'Ariana Grande',\n            uri: 'spotify:artist:66CXWjxzNUsdJxJ2JdwvnR',\n          },\n        ],\n\n        duration_ms: 242644,\n        id: '2O3MQ6H3gjrIWDcpeTrikT',\n        name: 'Santa, Can’t You Hear Me',\n        uri: 'spotify:track:2O3MQ6H3gjrIWDcpeTrikT',\n      },\n    },\n  ],\n  limit: 6,\n  next: 'https://api.spotify.com/v1/me/tracks?offset=6&limit=6&locale=en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7',\n  offset: 0,\n  previous: null,\n  total: 373,\n}"
				},
				{
					"name": "searchResponse",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/tests/mocks.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "SearchResponse",
					"defaultValue": "{\n  tracks: {\n    items: [\n      {\n        album: {\n          artists: [\n            {\n              href: 'https://api.spotify.com/v1/artists/0LyfQWJT6nXafLPZqxe9Of',\n              id: '0LyfQWJT6nXafLPZqxe9Of',\n              name: 'Various Artists',\n              type: 'artist',\n              uri: 'spotify:artist:0LyfQWJT6nXafLPZqxe9Of',\n            },\n          ],\n          id: '4qO2T8ZnNedvby1faWQE5p',\n          images: [\n            {\n              height: 640,\n              url: 'https://i.scdn.co/image/ab67616d0000b273510b37e772bdf2e8204beb0a',\n              width: 640,\n            },\n            {\n              height: 300,\n              url: 'https://i.scdn.co/image/ab67616d00001e02510b37e772bdf2e8204beb0a',\n              width: 300,\n            },\n            {\n              height: 64,\n              url: 'https://i.scdn.co/image/ab67616d00004851510b37e772bdf2e8204beb0a',\n              width: 64,\n            },\n          ],\n          name: 'Sześć Oceanów (Piosenki 1962-2013)',\n          release_date: '2014-11-03',\n          release_date_precision: 'day',\n          total_tracks: 90,\n          type: 'album',\n          uri: 'spotify:album:4qO2T8ZnNedvby1faWQE5p',\n        },\n        artists: [\n          {\n            href: 'https://api.spotify.com/v1/artists/1IYFJPQcbXYjgkyebYs1w6',\n            id: '1IYFJPQcbXYjgkyebYs1w6',\n            name: 'Maryla Rodowicz',\n            type: 'artist',\n            uri: 'spotify:artist:1IYFJPQcbXYjgkyebYs1w6',\n          },\n        ],\n        duration_ms: 265293,\n        id: '406CXfShfgeftnNLmJl49t',\n        name: 'Małgośka',\n        uri: 'spotify:track:406CXfShfgeftnNLmJl49t',\n      },\n    ],\n  },\n}"
				},
				{
					"name": "user",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/tests/mocks.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "User",
					"defaultValue": "{\n  display_name: 'pieceofsth7',\n  external_urls: {\n    spotify: 'https://open.spotify.com/user/f2o7vc8wi9351bcn76igbhe2i',\n  },\n  href: 'https://api.spotify.com/v1/users/f2o7vc8wi9351bcn76igbhe2i',\n  id: 'f2o7vc8wi9351bcn76igbhe2i',\n  images: [\n    {\n      url: 'https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=2046809475373475&height=50&width=50&ext=1711003338&hash=AfrKCTPEXL-APstaCRqb6iOzqjl5RHKOwdXRP0WTcNeYdQ',\n      height: 64,\n      width: 64,\n    },\n    {\n      url: 'https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=2046809475373475&height=300&width=300&ext=1711003338&hash=AfqKpNyFIAuS_M4gwqL8eAZNp2fgALFMnqTRsvVRRG4E5g',\n      height: 300,\n      width: 300,\n    },\n  ],\n  type: 'user',\n  uri: 'spotify:user:f2o7vc8wi9351bcn76igbhe2i',\n  followers: {\n    total: 7,\n  },\n  country: 'PL',\n  product: 'premium',\n  explicit_content: {\n    filter_enabled: false,\n    filter_locked: false,\n  },\n  email: 'magdakochman7@gmail.com',\n}"
				}
			],
			"src/stories/button.stories.ts": [
				{
					"name": "Icon",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/stories/button.stories.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Story",
					"defaultValue": "{\n  args: {\n    mode: 'text'\n  },\n  render: ({mode}) => {\n    console.log(\"🚀 ~ mode:\", mode)\n    return {\n      template: `<button type=\"button\" mode=\"${mode}\" appButton> <app-icon class=\"icon\" type=\"menu\"></app-icon></button>`,\n    };\n  },\n}"
				},
				{
					"name": "meta",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/stories/button.stories.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Meta<ButtonDirective>",
					"defaultValue": "{\n  title: 'Example/Button',\n  tags: ['autodocs'],\n  argTypes: {\n    mode: {\n      description: 'Mode of button',\n      options: ['opacity', 'text'],\n      control: { type: 'select' },\n    },\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, ButtonDirective, IconComponent],\n    }),\n  ],\n}"
				},
				{
					"name": "Opacity",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/stories/button.stories.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Story",
					"defaultValue": "{\n  render: () => {\n    return {\n      template: `<button type=\"button\" [mode]=\"'opacity'\" appButton>button</button>`,\n    };\n  },\n}"
				},
				{
					"name": "Primary",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/stories/button.stories.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Story",
					"defaultValue": "{\n  render: () => {\n    return {\n      template: `<button type=\"button\" appButton>button</button>`,\n    };\n  },\n}"
				},
				{
					"name": "Text",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/stories/button.stories.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Story",
					"defaultValue": "{\n  render: () => {\n    return {\n      template: `<button type=\"button\" [mode]=\"'text'\" appButton>button</button>`,\n    };\n  },\n}"
				}
			],
			"src/app/utils/icons.ts": [
				{
					"name": "icons",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/app/utils/icons.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "",
					"defaultValue": "{\n  logo: '<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 66 66\"><path fill=\"#fff\" d=\"M33 0C14.775 0 0 14.775 0 33c0 18.226 14.775 33 33 33 18.227 0 33-14.774 33-33C66 14.776 51.227.002 33 .002V0Zm15.133 47.596a2.056 2.056 0 0 1-2.83.682c-7.747-4.733-17.5-5.805-28.988-3.18a2.058 2.058 0 0 1-.915-4.012c12.57-2.873 23.353-1.636 32.052 3.68.969.595 1.276 1.86.681 2.83Zm4.04-8.987a2.572 2.572 0 0 1-3.54.85c-8.87-5.454-22.39-7.033-32.883-3.849a2.576 2.576 0 0 1-3.21-1.714 2.577 2.577 0 0 1 1.715-3.209c11.985-3.636 26.884-1.875 37.07 4.385a2.572 2.572 0 0 1 .847 3.537Zm.346-9.357c-10.636-6.317-28.183-6.898-38.338-3.816a3.086 3.086 0 1 1-1.791-5.907c11.656-3.539 31.034-2.855 43.28 4.414a3.083 3.083 0 0 1 1.079 4.23 3.084 3.084 0 0 1-4.228 1.08h-.002Z\"/></svg>',\n  menu: '<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"currentColor\" color=\"currentColor\"><path d=\"M4 18h16M4 12h16M4 6h16\" stroke=\"#fff\" stroke-width=\"2\" stroke-linecap=\"round\" /></svg>',\n  heart:\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 20 20\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M3.172 5.172a4 4 0 0 1 5.656 0L10 6.343l1.172-1.171a4 4 0 1 1 5.656 5.656L10 17.657l-6.828-6.829a4 4 0 0 1 0-5.656Z\" clip-rule=\"evenodd\" /></svg>',\n  heartOutline:\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4.318 6.318a4.5 4.5 0 0 0 0 6.364L12 20.364l7.682-7.682a4.5 4.5 0 0 0-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 0 0-6.364 0Z\" /></svg>',\n  shuffle:\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M14 20v-2h2.6l-3.2-3.2l1.425-1.425L18 16.55V14h2v6h-6Zm-8.6 0L4 18.6L16.6 6H14V4h6v6h-2V7.4L5.4 20Zm3.775-9.425L4 5.4L5.4 4l5.175 5.175l-1.4 1.4Z\" /></svg>',\n} as const"
				}
			],
			"src/stories/track.stories.ts": [
				{
					"name": "meta",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/stories/track.stories.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Meta<TrackComponent>",
					"defaultValue": "{\n  title: 'Example/Track',\n  component: TrackComponent,\n  tags: ['autodocs'],\n  argTypes: {},\n  render: (args) => ({\n    props: {\n      ...args,\n    },\n    template: `<app-track ${argsToTemplate(args)}></app-track>`,\n  }),\n}"
				},
				{
					"name": "Track",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": "src/stories/track.stories.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Story",
					"defaultValue": "{\n  args: {\n    track: savedTracks.items[0].track,\n  },\n}"
				}
			],
			".storybook/preview.ts": [
				{
					"name": "preview",
					"ctype": "miscellaneous",
					"subtype": "variable",
					"file": ".storybook/preview.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"type": "Preview",
					"defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
				}
			]
		},
		"groupedFunctions": {
			"src/app/utils/utils.ts": [
				{
					"name": "base64url",
					"file": "src/app/utils/utils.ts",
					"ctype": "miscellaneous",
					"subtype": "function",
					"deprecated": false,
					"deprecationMessage": "",
					"description": "",
					"args": [
						{
							"name": "bytes",
							"type": "Uint8Array",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"jsdoctags": [
						{
							"name": "bytes",
							"type": "Uint8Array",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "generateCodeChallenge",
					"file": "src/app/utils/utils.ts",
					"ctype": "miscellaneous",
					"subtype": "function",
					"deprecated": false,
					"deprecationMessage": "",
					"description": "",
					"args": [
						{
							"name": "code_verifier",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"jsdoctags": [
						{
							"name": "code_verifier",
							"type": "string",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				},
				{
					"name": "randomBytes",
					"file": "src/app/utils/utils.ts",
					"ctype": "miscellaneous",
					"subtype": "function",
					"deprecated": false,
					"deprecationMessage": "",
					"description": "",
					"args": [
						{
							"name": "size",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": ""
						}
					],
					"jsdoctags": [
						{
							"name": "size",
							"type": "number",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			],
			"src/app/utils/createQuery.ts": [
				{
					"name": "createQuery",
					"file": "src/app/utils/createQuery.ts",
					"ctype": "miscellaneous",
					"subtype": "function",
					"deprecated": false,
					"deprecationMessage": "",
					"description": "",
					"args": [
						{
							"name": "queryKey",
							"type": "TQueryKey",
							"deprecated": false,
							"deprecationMessage": ""
						},
						{
							"name": "query",
							"type": "Observable",
							"deprecated": false,
							"deprecationMessage": ""
						},
						{
							"name": "queryEnabled",
							"type": "boolean",
							"deprecated": false,
							"deprecationMessage": "",
							"defaultValue": "true"
						}
					],
					"jsdoctags": [
						{
							"name": "queryKey",
							"type": "TQueryKey",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						},
						{
							"name": "query",
							"type": "Observable",
							"deprecated": false,
							"deprecationMessage": "",
							"tagName": {
								"text": "param"
							}
						},
						{
							"name": "queryEnabled",
							"type": "boolean",
							"deprecated": false,
							"deprecationMessage": "",
							"defaultValue": "true",
							"tagName": {
								"text": "param"
							}
						}
					]
				}
			]
		},
		"groupedEnumerations": {},
		"groupedTypeAliases": {
			"src/app/shared/button/button.directive.ts": [
				{
					"name": "ButtonMode",
					"ctype": "miscellaneous",
					"subtype": "typealias",
					"rawtype": "\"text\" | \"opacity\"",
					"file": "src/app/shared/button/button.directive.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"description": "",
					"kind": 192
				}
			],
			"src/app/shared/interfaces/dataWithState.ts": [
				{
					"name": "DataWithSate",
					"ctype": "miscellaneous",
					"subtype": "typealias",
					"rawtype": "literal type | literal type",
					"file": "src/app/shared/interfaces/dataWithState.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"description": "",
					"kind": 192
				}
			],
			"src/app/utils/icons.ts": [
				{
					"name": "Icons",
					"ctype": "miscellaneous",
					"subtype": "typealias",
					"rawtype": "",
					"file": "src/app/utils/icons.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"description": "",
					"kind": 198
				}
			],
			"src/stories/button.stories.ts": [
				{
					"name": "Story",
					"ctype": "miscellaneous",
					"subtype": "typealias",
					"rawtype": "StoryObj<ButtonDirective>",
					"file": "src/stories/button.stories.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"description": "",
					"kind": 183
				}
			],
			"src/stories/track.stories.ts": [
				{
					"name": "Story",
					"ctype": "miscellaneous",
					"subtype": "typealias",
					"rawtype": "StoryObj<TrackComponent>",
					"file": "src/stories/track.stories.ts",
					"deprecated": false,
					"deprecationMessage": "",
					"description": "",
					"kind": 183
				}
			]
		}
	},
	"routes": [],
	"coverage": {
		"count": 0,
		"status": "low",
		"files": [
			{
				"filePath": ".storybook/preview.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "preview",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/app/app-config.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "appConfig",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/app/app.component.ts",
				"type": "component",
				"linktype": "component",
				"name": "AppComponent",
				"coveragePercent": 6,
				"coverageCount": "1/15",
				"status": "low"
			},
			{
				"filePath": "src/app/home/home.component.ts",
				"type": "component",
				"linktype": "component",
				"name": "HomeComponent",
				"coveragePercent": 0,
				"coverageCount": "0/4",
				"status": "low"
			},
			{
				"filePath": "src/app/navbar/navbar.component.ts",
				"type": "component",
				"linktype": "component",
				"name": "NavbarComponent",
				"coveragePercent": 0,
				"coverageCount": "0/8",
				"status": "low"
			},
			{
				"filePath": "src/app/player/player.component.ts",
				"type": "component",
				"linktype": "component",
				"name": "PlayerComponent",
				"coveragePercent": 0,
				"coverageCount": "0/20",
				"status": "low"
			},
			{
				"filePath": "src/app/playlist/playlist.component.ts",
				"type": "component",
				"linktype": "component",
				"name": "PlaylistComponent",
				"coveragePercent": 0,
				"coverageCount": "0/8",
				"status": "low"
			},
			{
				"filePath": "src/app/saved-tracks/saved-tracks.component.ts",
				"type": "component",
				"linktype": "component",
				"name": "SavedTracksComponent",
				"coveragePercent": 0,
				"coverageCount": "0/5",
				"status": "low"
			},
			{
				"filePath": "src/app/search-tracks/search-tracks.component.ts",
				"type": "component",
				"linktype": "component",
				"name": "SearchTracksComponent",
				"coveragePercent": 0,
				"coverageCount": "0/8",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/button/button.directive.ts",
				"type": "directive",
				"linktype": "directive",
				"name": "ButtonDirective",
				"coveragePercent": 0,
				"coverageCount": "0/10",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/duration/duration.pipe.ts",
				"type": "pipe",
				"linktype": "pipe",
				"name": "DurationPipe",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/icon/icon.component.ts",
				"type": "component",
				"linktype": "component",
				"name": "IconComponent",
				"coveragePercent": 0,
				"coverageCount": "0/5",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interceptors/auth.interceptor.ts",
				"type": "interceptor",
				"linktype": "interceptor",
				"name": "AuthInterceptor",
				"coveragePercent": 0,
				"coverageCount": "0/4",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interfaces/authData.ts",
				"type": "interface",
				"linktype": "interface",
				"name": "AuthData",
				"coveragePercent": 0,
				"coverageCount": "0/6",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interfaces/image.ts",
				"type": "interface",
				"linktype": "interface",
				"name": "Image",
				"coveragePercent": 0,
				"coverageCount": "0/4",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interfaces/playlist.ts",
				"type": "interface",
				"linktype": "interface",
				"name": "FeaturedPlaylistResponse",
				"coveragePercent": 0,
				"coverageCount": "0/3",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interfaces/playlist.ts",
				"type": "interface",
				"linktype": "interface",
				"name": "Playlist",
				"coveragePercent": 0,
				"coverageCount": "0/10",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interfaces/playlist.ts",
				"type": "interface",
				"linktype": "interface",
				"name": "PlaylistResponse",
				"coveragePercent": 0,
				"coverageCount": "0/5",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interfaces/track.ts",
				"type": "interface",
				"linktype": "interface",
				"name": "Artist",
				"coveragePercent": 0,
				"coverageCount": "0/6",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interfaces/track.ts",
				"type": "interface",
				"linktype": "interface",
				"name": "Item",
				"coveragePercent": 0,
				"coverageCount": "0/3",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interfaces/track.ts",
				"type": "interface",
				"linktype": "interface",
				"name": "Queue",
				"coveragePercent": 0,
				"coverageCount": "0/3",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interfaces/track.ts",
				"type": "interface",
				"linktype": "interface",
				"name": "SearchResponse",
				"coveragePercent": 0,
				"coverageCount": "0/2",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interfaces/track.ts",
				"type": "interface",
				"linktype": "interface",
				"name": "Track",
				"coveragePercent": 0,
				"coverageCount": "0/7",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interfaces/track.ts",
				"type": "interface",
				"linktype": "interface",
				"name": "TracksResponse",
				"coveragePercent": 0,
				"coverageCount": "0/8",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/interfaces/user.ts",
				"type": "interface",
				"linktype": "interface",
				"name": "User",
				"coveragePercent": 0,
				"coverageCount": "0/13",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/services/auth.service.ts",
				"type": "injectable",
				"linktype": "injectable",
				"name": "AuthService",
				"coveragePercent": 7,
				"coverageCount": "1/14",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/services/player.service.ts",
				"type": "injectable",
				"linktype": "injectable",
				"name": "PlayerService",
				"coveragePercent": 0,
				"coverageCount": "0/19",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/services/storage.service.ts",
				"type": "injectable",
				"linktype": "injectable",
				"name": "StorageService",
				"coveragePercent": 0,
				"coverageCount": "0/4",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/services/track.service.ts",
				"type": "injectable",
				"linktype": "injectable",
				"name": "TrackService",
				"coveragePercent": 0,
				"coverageCount": "0/15",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/services/user.service.ts",
				"type": "injectable",
				"linktype": "injectable",
				"name": "UserService",
				"coveragePercent": 0,
				"coverageCount": "0/4",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/track-list/track-list.component.ts",
				"type": "component",
				"linktype": "component",
				"name": "TrackListComponent",
				"coveragePercent": 0,
				"coverageCount": "0/12",
				"status": "low"
			},
			{
				"filePath": "src/app/shared/track/track.component.ts",
				"type": "component",
				"linktype": "component",
				"name": "TrackComponent",
				"coveragePercent": 0,
				"coverageCount": "0/3",
				"status": "low"
			},
			{
				"filePath": "src/app/top-tracks/top-tracks.component.ts",
				"type": "component",
				"linktype": "component",
				"name": "TopTracksComponent",
				"coveragePercent": 0,
				"coverageCount": "0/6",
				"status": "low"
			},
			{
				"filePath": "src/app/utils/config.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "BASE_URL",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/app/utils/config.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "CLIENT_ID",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/app/utils/config.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "HEADER_CONFIG",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/app/utils/config.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "SPORIFY_SCOPES",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/app/utils/createQuery.ts",
				"type": "function",
				"linktype": "miscellaneous",
				"linksubtype": "function",
				"name": "createQuery",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/app/utils/icons.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "icons",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/app/utils/utils.ts",
				"type": "function",
				"linktype": "miscellaneous",
				"linksubtype": "function",
				"name": "base64url",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/app/utils/utils.ts",
				"type": "function",
				"linktype": "miscellaneous",
				"linksubtype": "function",
				"name": "generateCodeChallenge",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/app/utils/utils.ts",
				"type": "function",
				"linktype": "miscellaneous",
				"linksubtype": "function",
				"name": "randomBytes",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/environments/environment.prod.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "environment",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/environments/environment.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "environment",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/stories/button.stories.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "Icon",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/stories/button.stories.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "meta",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/stories/button.stories.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "Opacity",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/stories/button.stories.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "Primary",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/stories/button.stories.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "Text",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/stories/track.stories.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "meta",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/stories/track.stories.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "Track",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/tests/mock-backend.interceptor.ts",
				"type": "interceptor",
				"linktype": "interceptor",
				"name": "MockBackendInterceptor",
				"coveragePercent": 0,
				"coverageCount": "0/2",
				"status": "low"
			},
			{
				"filePath": "src/tests/mocks.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "featuredPlaylists",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/tests/mocks.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "playlist",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/tests/mocks.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "playlistsResponse",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/tests/mocks.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "playlistTracks",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/tests/mocks.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "savedTracks",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/tests/mocks.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "searchResponse",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			},
			{
				"filePath": "src/tests/mocks.ts",
				"type": "variable",
				"linktype": "miscellaneous",
				"linksubtype": "variable",
				"name": "user",
				"coveragePercent": 0,
				"coverageCount": "0/1",
				"status": "low"
			}
		]
	}
}
